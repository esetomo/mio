# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_cmio', [dirname(__file__)])
        except ImportError:
            import _cmio
            return _cmio
        if fp is not None:
            try:
                _mod = imp.load_module('_cmio', fp, pathname, description)
            finally:
                fp.close()
                return _mod
    _cmio = swig_import_helper()
    del swig_import_helper
else:
    import _cmio
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class Vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cmio.Vector3_x_set
    __swig_getmethods__["x"] = _cmio.Vector3_x_get
    if _newclass:x = _swig_property(_cmio.Vector3_x_get, _cmio.Vector3_x_set)
    __swig_setmethods__["y"] = _cmio.Vector3_y_set
    __swig_getmethods__["y"] = _cmio.Vector3_y_get
    if _newclass:y = _swig_property(_cmio.Vector3_y_get, _cmio.Vector3_y_set)
    __swig_setmethods__["z"] = _cmio.Vector3_z_set
    __swig_getmethods__["z"] = _cmio.Vector3_z_get
    if _newclass:z = _swig_property(_cmio.Vector3_z_get, _cmio.Vector3_z_set)
    def __init__(self, *args): 
        this = _cmio.new_Vector3(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args): return _cmio.Vector3___add__(self, *args)
    def __iadd__(self, *args): return _cmio.Vector3___iadd__(self, *args)
    def __sub__(self, *args): return _cmio.Vector3___sub__(self, *args)
    def __isub__(self, *args): return _cmio.Vector3___isub__(self, *args)
    def __eq__(self, *args): return _cmio.Vector3___eq__(self, *args)
    def __mul__(self, *args): return _cmio.Vector3___mul__(self, *args)
    def __imul__(self, *args): return _cmio.Vector3___imul__(self, *args)
    def __div__(self, *args): return _cmio.Vector3___div__(self, *args)
    def __idiv__(self, *args): return _cmio.Vector3___idiv__(self, *args)
    def __neg__(self): return _cmio.Vector3___neg__(self)
    def __ne__(self, *args): return _cmio.Vector3___ne__(self, *args)
    def fill_array_3(self, *args): return _cmio.Vector3_fill_array_3(self, *args)
    def fill_array_4(self, *args): return _cmio.Vector3_fill_array_4(self, *args)
    def length_squared(self): return _cmio.Vector3_length_squared(self)
    def length(self): return _cmio.Vector3_length(self)
    def __copy__(self): return _cmio.Vector3___copy__(self)
    def __deepcopy__(self): return _cmio.Vector3___deepcopy__(self)
    def is_near(self, *args): return _cmio.Vector3_is_near(self, *args)
    def __getitem__(self, *args): return _cmio.Vector3___getitem__(self, *args)
    def __setitem__(self, *args): return _cmio.Vector3___setitem__(self, *args)
    def accept(self, visitor):
    	visitor.visit_Vector3(self)
    	
    def __repr__(self):
    	return "Vector3<%f, %f, %f>" % (self.x, self.y, self.z)

    __swig_destroy__ = _cmio.delete_Vector3
    __del__ = lambda self : None;
Vector3_swigregister = _cmio.Vector3_swigregister
Vector3_swigregister(Vector3)


def absdot(*args):
  return _cmio.absdot(*args)
absdot = _cmio.absdot

def cross(*args):
  return _cmio.cross(*args)
cross = _cmio.cross

def coordinate_system(*args):
  return _cmio.coordinate_system(*args)
coordinate_system = _cmio.coordinate_system

def spherical_theta(*args):
  return _cmio.spherical_theta(*args)
spherical_theta = _cmio.spherical_theta

def spherical_phi(*args):
  return _cmio.spherical_phi(*args)
spherical_phi = _cmio.spherical_phi
class Point3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Point3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Point3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cmio.Point3_x_set
    __swig_getmethods__["x"] = _cmio.Point3_x_get
    if _newclass:x = _swig_property(_cmio.Point3_x_get, _cmio.Point3_x_set)
    __swig_setmethods__["y"] = _cmio.Point3_y_set
    __swig_getmethods__["y"] = _cmio.Point3_y_get
    if _newclass:y = _swig_property(_cmio.Point3_y_get, _cmio.Point3_y_set)
    __swig_setmethods__["z"] = _cmio.Point3_z_set
    __swig_getmethods__["z"] = _cmio.Point3_z_get
    if _newclass:z = _swig_property(_cmio.Point3_z_get, _cmio.Point3_z_set)
    def __init__(self, *args): 
        this = _cmio.new_Point3(*args)
        try: self.this.append(this)
        except: self.this = this
    def __sub__(self, *args): return _cmio.Point3___sub__(self, *args)
    def __isub__(self, *args): return _cmio.Point3___isub__(self, *args)
    def __iadd__(self, *args): return _cmio.Point3___iadd__(self, *args)
    def __add__(self, *args): return _cmio.Point3___add__(self, *args)
    def __mul__(self, *args): return _cmio.Point3___mul__(self, *args)
    def __imul__(self, *args): return _cmio.Point3___imul__(self, *args)
    def __div__(self, *args): return _cmio.Point3___div__(self, *args)
    def __idiv__(self, *args): return _cmio.Point3___idiv__(self, *args)
    def __eq__(self, *args): return _cmio.Point3___eq__(self, *args)
    def __ne__(self, *args): return _cmio.Point3___ne__(self, *args)
    def fill_array_3(self, *args): return _cmio.Point3_fill_array_3(self, *args)
    def fill_array_4(self, *args): return _cmio.Point3_fill_array_4(self, *args)
    def __copy__(self): return _cmio.Point3___copy__(self)
    def __deepcopy__(self): return _cmio.Point3___deepcopy__(self)
    def is_near(self, *args): return _cmio.Point3_is_near(self, *args)
    def __getitem__(self, *args): return _cmio.Point3___getitem__(self, *args)
    def __setitem__(self, *args): return _cmio.Point3___setitem__(self, *args)
    def accept(self, visitor):
    	visitor.visit_Point3(self)
    	
    def __repr__(self):
    	return "Point3<%f, %f, %f>" % (self.x, self.y, self.z)

    __swig_destroy__ = _cmio.delete_Point3
    __del__ = lambda self : None;
Point3_swigregister = _cmio.Point3_swigregister
Point3_swigregister(Point3)

def spherical_direction(*args):
  return _cmio.spherical_direction(*args)
spherical_direction = _cmio.spherical_direction


def distance(*args):
  return _cmio.distance(*args)
distance = _cmio.distance

def distance_squared(*args):
  return _cmio.distance_squared(*args)
distance_squared = _cmio.distance_squared
class Ray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Ray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Ray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_Ray(*args)
        try: self.this.append(this)
        except: self.this = this
    def __call__(self, *args): return _cmio.Ray___call__(self, *args)
    __swig_setmethods__["origin"] = _cmio.Ray_origin_set
    __swig_getmethods__["origin"] = _cmio.Ray_origin_get
    if _newclass:origin = _swig_property(_cmio.Ray_origin_get, _cmio.Ray_origin_set)
    __swig_setmethods__["direction"] = _cmio.Ray_direction_set
    __swig_getmethods__["direction"] = _cmio.Ray_direction_get
    if _newclass:direction = _swig_property(_cmio.Ray_direction_get, _cmio.Ray_direction_set)
    def accept(self, visitor):
    	visitor.visit_Ray(self)

    __swig_destroy__ = _cmio.delete_Ray
    __del__ = lambda self : None;
Ray_swigregister = _cmio.Ray_swigregister
Ray_swigregister(Ray)

class Box(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Box, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Box, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_Box(*args)
        try: self.this.append(this)
        except: self.this = this
    def overlaps(self, *args): return _cmio.Box_overlaps(self, *args)
    def inside(self, *args): return _cmio.Box_inside(self, *args)
    def expand(self, *args): return _cmio.Box_expand(self, *args)
    def volume(self): return _cmio.Box_volume(self)
    def surface_area(self): return _cmio.Box_surface_area(self)
    def diameter(self): return _cmio.Box_diameter(self)
    def centroid(self): return _cmio.Box_centroid(self)
    def maximum_extent(self): return _cmio.Box_maximum_extent(self)
    def bounding_sphere(self, *args): return _cmio.Box_bounding_sphere(self, *args)
    def intersect_predicate(self, *args): return _cmio.Box_intersect_predicate(self, *args)
    __swig_setmethods__["min_point"] = _cmio.Box_min_point_set
    __swig_getmethods__["min_point"] = _cmio.Box_min_point_get
    if _newclass:min_point = _swig_property(_cmio.Box_min_point_get, _cmio.Box_min_point_set)
    __swig_setmethods__["max_point"] = _cmio.Box_max_point_set
    __swig_getmethods__["max_point"] = _cmio.Box_max_point_get
    if _newclass:max_point = _swig_property(_cmio.Box_max_point_get, _cmio.Box_max_point_set)
    def accept(self, visitor):
    	visitor.visit_Box(self)	

    __swig_destroy__ = _cmio.delete_Box
    __del__ = lambda self : None;
Box_swigregister = _cmio.Box_swigregister
Box_swigregister(Box)

class Matrix4x4(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matrix4x4, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matrix4x4, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_Matrix4x4(*args)
        try: self.this.append(this)
        except: self.this = this
    def _get(self, *args): return _cmio.Matrix4x4__get(self, *args)
    def _set(self, *args): return _cmio.Matrix4x4__set(self, *args)
    def __mul__(self, *args): return _cmio.Matrix4x4___mul__(self, *args)
    def get_column_major_array(self, *args): return _cmio.Matrix4x4_get_column_major_array(self, *args)
    def __copy__(self): return _cmio.Matrix4x4___copy__(self)
    def __deepcopy__(self): return _cmio.Matrix4x4___deepcopy__(self)
    def is_near(self, *args): return _cmio.Matrix4x4_is_near(self, *args)
    __swig_getmethods__["identity"] = lambda x: _cmio.Matrix4x4_identity
    if _newclass:identity = staticmethod(_cmio.Matrix4x4_identity)
    __swig_getmethods__["translate"] = lambda x: _cmio.Matrix4x4_translate
    if _newclass:translate = staticmethod(_cmio.Matrix4x4_translate)
    __swig_getmethods__["translate_x"] = lambda x: _cmio.Matrix4x4_translate_x
    if _newclass:translate_x = staticmethod(_cmio.Matrix4x4_translate_x)
    __swig_getmethods__["translate_y"] = lambda x: _cmio.Matrix4x4_translate_y
    if _newclass:translate_y = staticmethod(_cmio.Matrix4x4_translate_y)
    __swig_getmethods__["translate_z"] = lambda x: _cmio.Matrix4x4_translate_z
    if _newclass:translate_z = staticmethod(_cmio.Matrix4x4_translate_z)
    __swig_getmethods__["scale"] = lambda x: _cmio.Matrix4x4_scale
    if _newclass:scale = staticmethod(_cmio.Matrix4x4_scale)
    __swig_getmethods__["scale_x"] = lambda x: _cmio.Matrix4x4_scale_x
    if _newclass:scale_x = staticmethod(_cmio.Matrix4x4_scale_x)
    __swig_getmethods__["scale_y"] = lambda x: _cmio.Matrix4x4_scale_y
    if _newclass:scale_y = staticmethod(_cmio.Matrix4x4_scale_y)
    __swig_getmethods__["scale_z"] = lambda x: _cmio.Matrix4x4_scale_z
    if _newclass:scale_z = staticmethod(_cmio.Matrix4x4_scale_z)
    __swig_getmethods__["rotate"] = lambda x: _cmio.Matrix4x4_rotate
    if _newclass:rotate = staticmethod(_cmio.Matrix4x4_rotate)
    __swig_getmethods__["rotate_x"] = lambda x: _cmio.Matrix4x4_rotate_x
    if _newclass:rotate_x = staticmethod(_cmio.Matrix4x4_rotate_x)
    __swig_getmethods__["rotate_y"] = lambda x: _cmio.Matrix4x4_rotate_y
    if _newclass:rotate_y = staticmethod(_cmio.Matrix4x4_rotate_y)
    __swig_getmethods__["rotate_z"] = lambda x: _cmio.Matrix4x4_rotate_z
    if _newclass:rotate_z = staticmethod(_cmio.Matrix4x4_rotate_z)
    __swig_getmethods__["look_at"] = lambda x: _cmio.Matrix4x4_look_at
    if _newclass:look_at = staticmethod(_cmio.Matrix4x4_look_at)
    def __getitem__(self, *args): return _cmio.Matrix4x4___getitem__(self, *args)
    def __setitem__(self, *args): return _cmio.Matrix4x4___setitem__(self, *args)
    def accept(self, visitor):
    	visitor.visit_Matrix4x4(self)

    __swig_destroy__ = _cmio.delete_Matrix4x4
    __del__ = lambda self : None;
Matrix4x4_swigregister = _cmio.Matrix4x4_swigregister
Matrix4x4_swigregister(Matrix4x4)

def union_(*args):
  return _cmio.union_(*args)
union_ = _cmio.union_

def __lshift__(*args):
  return _cmio.__lshift__(*args)
__lshift__ = _cmio.__lshift__

def Matrix4x4_identity():
  return _cmio.Matrix4x4_identity()
Matrix4x4_identity = _cmio.Matrix4x4_identity

def Matrix4x4_translate(*args):
  return _cmio.Matrix4x4_translate(*args)
Matrix4x4_translate = _cmio.Matrix4x4_translate

def Matrix4x4_translate_x(*args):
  return _cmio.Matrix4x4_translate_x(*args)
Matrix4x4_translate_x = _cmio.Matrix4x4_translate_x

def Matrix4x4_translate_y(*args):
  return _cmio.Matrix4x4_translate_y(*args)
Matrix4x4_translate_y = _cmio.Matrix4x4_translate_y

def Matrix4x4_translate_z(*args):
  return _cmio.Matrix4x4_translate_z(*args)
Matrix4x4_translate_z = _cmio.Matrix4x4_translate_z

def Matrix4x4_scale(*args):
  return _cmio.Matrix4x4_scale(*args)
Matrix4x4_scale = _cmio.Matrix4x4_scale

def Matrix4x4_scale_x(*args):
  return _cmio.Matrix4x4_scale_x(*args)
Matrix4x4_scale_x = _cmio.Matrix4x4_scale_x

def Matrix4x4_scale_y(*args):
  return _cmio.Matrix4x4_scale_y(*args)
Matrix4x4_scale_y = _cmio.Matrix4x4_scale_y

def Matrix4x4_scale_z(*args):
  return _cmio.Matrix4x4_scale_z(*args)
Matrix4x4_scale_z = _cmio.Matrix4x4_scale_z

def Matrix4x4_rotate(*args):
  return _cmio.Matrix4x4_rotate(*args)
Matrix4x4_rotate = _cmio.Matrix4x4_rotate

def Matrix4x4_rotate_x(*args):
  return _cmio.Matrix4x4_rotate_x(*args)
Matrix4x4_rotate_x = _cmio.Matrix4x4_rotate_x

def Matrix4x4_rotate_y(*args):
  return _cmio.Matrix4x4_rotate_y(*args)
Matrix4x4_rotate_y = _cmio.Matrix4x4_rotate_y

def Matrix4x4_rotate_z(*args):
  return _cmio.Matrix4x4_rotate_z(*args)
Matrix4x4_rotate_z = _cmio.Matrix4x4_rotate_z

def Matrix4x4_look_at(*args):
  return _cmio.Matrix4x4_look_at(*args)
Matrix4x4_look_at = _cmio.Matrix4x4_look_at


def transpose(*args):
  return _cmio.transpose(*args)
transpose = _cmio.transpose

def det(*args):
  return _cmio.det(*args)
det = _cmio.det
class Transform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Transform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Transform, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m"] = _cmio.Transform_m_set
    __swig_getmethods__["m"] = _cmio.Transform_m_get
    if _newclass:m = _swig_property(_cmio.Transform_m_get, _cmio.Transform_m_set)
    __swig_setmethods__["mi"] = _cmio.Transform_mi_set
    __swig_getmethods__["mi"] = _cmio.Transform_mi_get
    if _newclass:mi = _swig_property(_cmio.Transform_mi_get, _cmio.Transform_mi_set)
    __swig_setmethods__["mit"] = _cmio.Transform_mit_set
    __swig_getmethods__["mit"] = _cmio.Transform_mit_get
    if _newclass:mit = _swig_property(_cmio.Transform_mit_get, _cmio.Transform_mit_set)
    def __init__(self, *args): 
        this = _cmio.new_Transform(*args)
        try: self.this.append(this)
        except: self.this = this
    def __mul__(self, *args): return _cmio.Transform___mul__(self, *args)
    def __imul__(self, *args): return _cmio.Transform___imul__(self, *args)
    __swig_getmethods__["identity"] = lambda x: _cmio.Transform_identity
    if _newclass:identity = staticmethod(_cmio.Transform_identity)
    __swig_getmethods__["translate"] = lambda x: _cmio.Transform_translate
    if _newclass:translate = staticmethod(_cmio.Transform_translate)
    __swig_getmethods__["translate_x"] = lambda x: _cmio.Transform_translate_x
    if _newclass:translate_x = staticmethod(_cmio.Transform_translate_x)
    __swig_getmethods__["translate_y"] = lambda x: _cmio.Transform_translate_y
    if _newclass:translate_y = staticmethod(_cmio.Transform_translate_y)
    __swig_getmethods__["translate_z"] = lambda x: _cmio.Transform_translate_z
    if _newclass:translate_z = staticmethod(_cmio.Transform_translate_z)
    __swig_getmethods__["scale"] = lambda x: _cmio.Transform_scale
    if _newclass:scale = staticmethod(_cmio.Transform_scale)
    __swig_getmethods__["scale_x"] = lambda x: _cmio.Transform_scale_x
    if _newclass:scale_x = staticmethod(_cmio.Transform_scale_x)
    __swig_getmethods__["scale_y"] = lambda x: _cmio.Transform_scale_y
    if _newclass:scale_y = staticmethod(_cmio.Transform_scale_y)
    __swig_getmethods__["scale_z"] = lambda x: _cmio.Transform_scale_z
    if _newclass:scale_z = staticmethod(_cmio.Transform_scale_z)
    __swig_getmethods__["rotate"] = lambda x: _cmio.Transform_rotate
    if _newclass:rotate = staticmethod(_cmio.Transform_rotate)
    __swig_getmethods__["rotate_x"] = lambda x: _cmio.Transform_rotate_x
    if _newclass:rotate_x = staticmethod(_cmio.Transform_rotate_x)
    __swig_getmethods__["rotate_y"] = lambda x: _cmio.Transform_rotate_y
    if _newclass:rotate_y = staticmethod(_cmio.Transform_rotate_y)
    __swig_getmethods__["rotate_z"] = lambda x: _cmio.Transform_rotate_z
    if _newclass:rotate_z = staticmethod(_cmio.Transform_rotate_z)
    def accept(self, visitor):
    	visitor.visit_Transform(self)

    __swig_destroy__ = _cmio.delete_Transform
    __del__ = lambda self : None;
Transform_swigregister = _cmio.Transform_swigregister
Transform_swigregister(Transform)

def Transform_identity():
  return _cmio.Transform_identity()
Transform_identity = _cmio.Transform_identity

def Transform_translate(*args):
  return _cmio.Transform_translate(*args)
Transform_translate = _cmio.Transform_translate

def Transform_translate_x(*args):
  return _cmio.Transform_translate_x(*args)
Transform_translate_x = _cmio.Transform_translate_x

def Transform_translate_y(*args):
  return _cmio.Transform_translate_y(*args)
Transform_translate_y = _cmio.Transform_translate_y

def Transform_translate_z(*args):
  return _cmio.Transform_translate_z(*args)
Transform_translate_z = _cmio.Transform_translate_z

def Transform_scale(*args):
  return _cmio.Transform_scale(*args)
Transform_scale = _cmio.Transform_scale

def Transform_scale_x(*args):
  return _cmio.Transform_scale_x(*args)
Transform_scale_x = _cmio.Transform_scale_x

def Transform_scale_y(*args):
  return _cmio.Transform_scale_y(*args)
Transform_scale_y = _cmio.Transform_scale_y

def Transform_scale_z(*args):
  return _cmio.Transform_scale_z(*args)
Transform_scale_z = _cmio.Transform_scale_z

def Transform_rotate(*args):
  return _cmio.Transform_rotate(*args)
Transform_rotate = _cmio.Transform_rotate

def Transform_rotate_x(*args):
  return _cmio.Transform_rotate_x(*args)
Transform_rotate_x = _cmio.Transform_rotate_x

def Transform_rotate_y(*args):
  return _cmio.Transform_rotate_y(*args)
Transform_rotate_y = _cmio.Transform_rotate_y

def Transform_rotate_z(*args):
  return _cmio.Transform_rotate_z(*args)
Transform_rotate_z = _cmio.Transform_rotate_z

class Quaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Quaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Quaternion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _cmio.Quaternion_x_set
    __swig_getmethods__["x"] = _cmio.Quaternion_x_get
    if _newclass:x = _swig_property(_cmio.Quaternion_x_get, _cmio.Quaternion_x_set)
    __swig_setmethods__["y"] = _cmio.Quaternion_y_set
    __swig_getmethods__["y"] = _cmio.Quaternion_y_get
    if _newclass:y = _swig_property(_cmio.Quaternion_y_get, _cmio.Quaternion_y_set)
    __swig_setmethods__["z"] = _cmio.Quaternion_z_set
    __swig_getmethods__["z"] = _cmio.Quaternion_z_get
    if _newclass:z = _swig_property(_cmio.Quaternion_z_get, _cmio.Quaternion_z_set)
    __swig_setmethods__["w"] = _cmio.Quaternion_w_set
    __swig_getmethods__["w"] = _cmio.Quaternion_w_get
    if _newclass:w = _swig_property(_cmio.Quaternion_w_get, _cmio.Quaternion_w_set)
    def __init__(self, *args): 
        this = _cmio.new_Quaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    def __add__(self, *args): return _cmio.Quaternion___add__(self, *args)
    def __iadd__(self, *args): return _cmio.Quaternion___iadd__(self, *args)
    def __sub__(self, *args): return _cmio.Quaternion___sub__(self, *args)
    def __isub__(self, *args): return _cmio.Quaternion___isub__(self, *args)
    def __mul__(self, *args): return _cmio.Quaternion___mul__(self, *args)
    def __imul__(self, *args): return _cmio.Quaternion___imul__(self, *args)
    def get_matrix(self): return _cmio.Quaternion_get_matrix(self)
    def __copy__(self): return _cmio.Quaternion___copy__(self)
    def __deepcopy__(self): return _cmio.Quaternion___deepcopy__(self)
    def is_near(self, *args): return _cmio.Quaternion_is_near(self, *args)
    def rotate(self, *args): return _cmio.Quaternion_rotate(self, *args)
    def accept(self, visitor):
    	visitor.visit_Quaternion(self)
    	
    def __repr__(self):
    	return "Quaternion<%f, %f, %f, %f>" % (self.x, self.y, self.z, self.w)

    __swig_destroy__ = _cmio.delete_Quaternion
    __del__ = lambda self : None;
Quaternion_swigregister = _cmio.Quaternion_swigregister
Quaternion_swigregister(Quaternion)


def conjugate(*args):
  return _cmio.conjugate(*args)
conjugate = _cmio.conjugate

def norm(*args):
  return _cmio.norm(*args)
norm = _cmio.norm

def norm_squared(*args):
  return _cmio.norm_squared(*args)
norm_squared = _cmio.norm_squared

def slerp(*args):
  return _cmio.slerp(*args)
slerp = _cmio.slerp
class Rgb(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rgb, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rgb, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _cmio.Rgb_r_set
    __swig_getmethods__["r"] = _cmio.Rgb_r_get
    if _newclass:r = _swig_property(_cmio.Rgb_r_get, _cmio.Rgb_r_set)
    __swig_setmethods__["g"] = _cmio.Rgb_g_set
    __swig_getmethods__["g"] = _cmio.Rgb_g_get
    if _newclass:g = _swig_property(_cmio.Rgb_g_get, _cmio.Rgb_g_set)
    __swig_setmethods__["b"] = _cmio.Rgb_b_set
    __swig_getmethods__["b"] = _cmio.Rgb_b_get
    if _newclass:b = _swig_property(_cmio.Rgb_b_get, _cmio.Rgb_b_set)
    def __init__(self, *args): 
        this = _cmio.new_Rgb(*args)
        try: self.this.append(this)
        except: self.this = this
    def __sub__(self, *args): return _cmio.Rgb___sub__(self, *args)
    def __add__(self, *args): return _cmio.Rgb___add__(self, *args)
    def __iadd__(self, *args): return _cmio.Rgb___iadd__(self, *args)
    def __mul__(self, *args): return _cmio.Rgb___mul__(self, *args)
    def __imul__(self, *args): return _cmio.Rgb___imul__(self, *args)
    def __div__(self, *args): return _cmio.Rgb___div__(self, *args)
    def __copy__(self): return _cmio.Rgb___copy__(self)
    def __deepcopy__(self): return _cmio.Rgb___deepcopy__(self)
    def is_near(self, *args): return _cmio.Rgb_is_near(self, *args)
    def __getitem__(self, *args): return _cmio.Rgb___getitem__(self, *args)
    def __setitem__(self, *args): return _cmio.Rgb___setitem__(self, *args)
    def accept(self, visitor):
    	visitor.visit_Rgb(self)

    __swig_destroy__ = _cmio.delete_Rgb
    __del__ = lambda self : None;
Rgb_swigregister = _cmio.Rgb_swigregister
Rgb_swigregister(Rgb)

def normalize(*args):
  return _cmio.normalize(*args)
normalize = _cmio.normalize

def inverse(*args):
  return _cmio.inverse(*args)
inverse = _cmio.inverse

def dot(*args):
  return _cmio.dot(*args)
dot = _cmio.dot

class Rgba(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Rgba, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Rgba, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _cmio.Rgba_r_set
    __swig_getmethods__["r"] = _cmio.Rgba_r_get
    if _newclass:r = _swig_property(_cmio.Rgba_r_get, _cmio.Rgba_r_set)
    __swig_setmethods__["g"] = _cmio.Rgba_g_set
    __swig_getmethods__["g"] = _cmio.Rgba_g_get
    if _newclass:g = _swig_property(_cmio.Rgba_g_get, _cmio.Rgba_g_set)
    __swig_setmethods__["b"] = _cmio.Rgba_b_set
    __swig_getmethods__["b"] = _cmio.Rgba_b_get
    if _newclass:b = _swig_property(_cmio.Rgba_b_get, _cmio.Rgba_b_set)
    __swig_setmethods__["a"] = _cmio.Rgba_a_set
    __swig_getmethods__["a"] = _cmio.Rgba_a_get
    if _newclass:a = _swig_property(_cmio.Rgba_a_get, _cmio.Rgba_a_set)
    def __init__(self, *args): 
        this = _cmio.new_Rgba(*args)
        try: self.this.append(this)
        except: self.this = this
    def __sub__(self, *args): return _cmio.Rgba___sub__(self, *args)
    def __add__(self, *args): return _cmio.Rgba___add__(self, *args)
    def __iadd__(self, *args): return _cmio.Rgba___iadd__(self, *args)
    def __mul__(self, *args): return _cmio.Rgba___mul__(self, *args)
    def __imul__(self, *args): return _cmio.Rgba___imul__(self, *args)
    def __div__(self, *args): return _cmio.Rgba___div__(self, *args)
    def fill_array_4(self, *args): return _cmio.Rgba_fill_array_4(self, *args)
    def get_pointer(self): return _cmio.Rgba_get_pointer(self)
    def __copy__(self): return _cmio.Rgba___copy__(self)
    def __deepcopy__(self): return _cmio.Rgba___deepcopy__(self)
    def is_near(self, *args): return _cmio.Rgba_is_near(self, *args)
    def __getitem__(self, *args): return _cmio.Rgba___getitem__(self, *args)
    def __setitem__(self, *args): return _cmio.Rgba___setitem__(self, *args)
    def accept(self, visitor):
    	visitor.visit_Rgba(self)

    __swig_destroy__ = _cmio.delete_Rgba
    __del__ = lambda self : None;
Rgba_swigregister = _cmio.Rgba_swigregister
Rgba_swigregister(Rgba)

class Int3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Int3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Int3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_Int3(*args)
        try: self.this.append(this)
        except: self.this = this
    def _get(self, *args): return _cmio.Int3__get(self, *args)
    def _set(self, *args): return _cmio.Int3__set(self, *args)
    def __getitem__(self, *args): return _cmio.Int3___getitem__(self, *args)
    def __setitem__(self, *args): return _cmio.Int3___setitem__(self, *args)
    def accept(self, visitor):
    	visitor.visit_Int3(self)

    __swig_destroy__ = _cmio.delete_Int3
    __del__ = lambda self : None;
Int3_swigregister = _cmio.Int3_swigregister
Int3_swigregister(Int3)

def __add__(*args):
  return _cmio.__add__(*args)
__add__ = _cmio.__add__

def __mul__(*args):
  return _cmio.__mul__(*args)
__mul__ = _cmio.__mul__

class Uv(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Uv, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Uv, name)
    __repr__ = _swig_repr
    __swig_setmethods__["u"] = _cmio.Uv_u_set
    __swig_getmethods__["u"] = _cmio.Uv_u_get
    if _newclass:u = _swig_property(_cmio.Uv_u_get, _cmio.Uv_u_set)
    __swig_setmethods__["v"] = _cmio.Uv_v_set
    __swig_getmethods__["v"] = _cmio.Uv_v_get
    if _newclass:v = _swig_property(_cmio.Uv_v_get, _cmio.Uv_v_set)
    def __init__(self, *args): 
        this = _cmio.new_Uv(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _cmio.Uv___eq__(self, *args)
    def accept(self, visitor):
    	visitor.visit_Uv(self)

    __swig_destroy__ = _cmio.delete_Uv
    __del__ = lambda self : None;
Uv_swigregister = _cmio.Uv_swigregister
Uv_swigregister(Uv)

class ReferenceCounted(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ReferenceCounted, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ReferenceCounted, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cmio.new_ReferenceCounted()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_ReferenceCounted
    __del__ = lambda self : None;
    def inc_ref(self): return _cmio.ReferenceCounted_inc_ref(self)
    def dec_ref(self): return _cmio.ReferenceCounted_dec_ref(self)
    def get_ref_count(self): return _cmio.ReferenceCounted_get_ref_count(self)
ReferenceCounted_swigregister = _cmio.ReferenceCounted_swigregister
ReferenceCounted_swigregister(ReferenceCounted)

class MioObject(ReferenceCounted):
    __swig_setmethods__ = {}
    for _s in [ReferenceCounted]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MioObject, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceCounted]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MioObject, name)
    __repr__ = _swig_repr
    def __init__(self, uid = ""): 
        this = _cmio.new_MioObject(uid)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_MioObject
    __del__ = lambda self : None;
    def get_uid(self): return _cmio.MioObject_get_uid(self)
    def set_uid(self, *args): return _cmio.MioObject_set_uid(self, *args)
MioObject_swigregister = _cmio.MioObject_swigregister
MioObject_swigregister(MioObject)

class Mesh(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Mesh, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Mesh, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_Mesh
    __del__ = lambda self : None;
    def get_bounding_box(self): return _cmio.Mesh_get_bounding_box(self)
    def _get_vertex(self, *args): return _cmio.Mesh__get_vertex(self, *args)
    def get_vertex(self, *args): return _cmio.Mesh_get_vertex(self, *args)
    def _get_normal(self, *args): return _cmio.Mesh__get_normal(self, *args)
    def get_normal(self, *args): return _cmio.Mesh_get_normal(self, *args)
    def get_polygon_count(self): return _cmio.Mesh_get_polygon_count(self)
    def _get_polygon_vertex_count(self, *args): return _cmio.Mesh__get_polygon_vertex_count(self, *args)
    def get_polygon_vertex_count(self, *args): return _cmio.Mesh_get_polygon_vertex_count(self, *args)
    def _get_polygon_vertex(self, *args): return _cmio.Mesh__get_polygon_vertex(self, *args)
    def get_polygon_vertex(self, *args): return _cmio.Mesh_get_polygon_vertex(self, *args)
    def _get_polygon_normal(self, *args): return _cmio.Mesh__get_polygon_normal(self, *args)
    def get_polygon_normal(self, *args): return _cmio.Mesh_get_polygon_normal(self, *args)
    def get_vertex_count(self): return _cmio.Mesh_get_vertex_count(self)
    def get_normal_count(self): return _cmio.Mesh_get_normal_count(self)
    def accept(self, *args): return _cmio.Mesh_accept(self, *args)
    def vertices(self):
    	for i in xrange(self.get_vertex_count()):
    		yield self.get_vertex(i)
    		
    def normals(self):
    	for i in xrange(self.get_normal_count()):
    		yield self.get_normal(i)

Mesh_swigregister = _cmio.Mesh_swigregister
Mesh_swigregister(Mesh)

class IndexedMesh(Mesh):
    __swig_setmethods__ = {}
    for _s in [Mesh]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexedMesh, name, value)
    __swig_getmethods__ = {}
    for _s in [Mesh]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexedMesh, name)
    __repr__ = _swig_repr
    def __init__(self, name = ""): 
        this = _cmio.new_IndexedMesh(name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_IndexedMesh
    __del__ = lambda self : None;
    def accept(self, *args): return _cmio.IndexedMesh_accept(self, *args)
    def get_bounding_box(self): return _cmio.IndexedMesh_get_bounding_box(self)
    def validate_bounding_box(self): return _cmio.IndexedMesh_validate_bounding_box(self)
    def invalidate_bounding_box(self): return _cmio.IndexedMesh_invalidate_bounding_box(self)
    def _get_vertex(self, *args): return _cmio.IndexedMesh__get_vertex(self, *args)
    def _get_normal(self, *args): return _cmio.IndexedMesh__get_normal(self, *args)
    def get_vertex_count(self): return _cmio.IndexedMesh_get_vertex_count(self)
    def get_normal_count(self): return _cmio.IndexedMesh_get_normal_count(self)
    def append_vertex(self, *args): return _cmio.IndexedMesh_append_vertex(self, *args)
    def append_normal(self, *args): return _cmio.IndexedMesh_append_normal(self, *args)
    def _set_normal(self, *args): return _cmio.IndexedMesh__set_normal(self, *args)
    def set_normal(self, *args): return _cmio.IndexedMesh_set_normal(self, *args)
    def _set_vertex(self, *args): return _cmio.IndexedMesh__set_vertex(self, *args)
    def set_vertex(self, *args): return _cmio.IndexedMesh_set_vertex(self, *args)
    def append_new_polygon(self): return _cmio.IndexedMesh_append_new_polygon(self)
    def append_vertex_normal_index_to_last_polygon(self, *args): return _cmio.IndexedMesh_append_vertex_normal_index_to_last_polygon(self, *args)
    def get_polygon_count(self): return _cmio.IndexedMesh_get_polygon_count(self)
    def _get_polygon_vertex_count(self, *args): return _cmio.IndexedMesh__get_polygon_vertex_count(self, *args)
    def _get_polygon_vertex(self, *args): return _cmio.IndexedMesh__get_polygon_vertex(self, *args)
    def _get_polygon_normal(self, *args): return _cmio.IndexedMesh__get_polygon_normal(self, *args)
    def _get_polygon_vertex_index(self, *args): return _cmio.IndexedMesh__get_polygon_vertex_index(self, *args)
    def get_polygon_vertex_index(self, *args): return _cmio.IndexedMesh_get_polygon_vertex_index(self, *args)
    def _get_polygon_normal_index(self, *args): return _cmio.IndexedMesh__get_polygon_normal_index(self, *args)
    def get_polygon_normal_index(self, *args): return _cmio.IndexedMesh_get_polygon_normal_index(self, *args)
    def __copy__(self): return _cmio.IndexedMesh___copy__(self)
IndexedMesh_swigregister = _cmio.IndexedMesh_swigregister
IndexedMesh_swigregister(IndexedMesh)

class GLTexture(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLTexture, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLTexture, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cmio.new_GLTexture()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_GLTexture
    __del__ = lambda self : None;
    def bind(self): return _cmio.GLTexture_bind(self)
    def download(self, *args): return _cmio.GLTexture_download(self, *args)
    def build_mipmap(self, *args): return _cmio.GLTexture_build_mipmap(self, *args)
    def accept(self, visitor):
    	visitor.visit_GLTexture(self)

GLTexture_swigregister = _cmio.GLTexture_swigregister
GLTexture_swigregister(GLTexture)

class ILImage(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILImage, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ILImage, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_ILImage(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_ILImage
    __del__ = lambda self : None;
    def get_file_name(self): return _cmio.ILImage_get_file_name(self)
    def build_mipmap(self): return _cmio.ILImage_build_mipmap(self)
    def bind(self): return _cmio.ILImage_bind(self)
    def get_texture(self): return _cmio.ILImage_get_texture(self)
    def get_image_id(self): return _cmio.ILImage_get_image_id(self)
    def accept(self, visitor):
    	visitor.visit_ILImage(self)

ILImage_swigregister = _cmio.ILImage_swigregister
ILImage_swigregister(ILImage)

class ILImageService(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILImageService, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ILImageService, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_ILImageService
    __del__ = lambda self : None;
    def get_image(self, *args): return _cmio.ILImageService_get_image(self, *args)
    def has_image_with_file_name(self, *args): return _cmio.ILImageService_has_image_with_file_name(self, *args)
    def has_image_with_id(self, *args): return _cmio.ILImageService_has_image_with_id(self, *args)
    def remove(self, *args): return _cmio.ILImageService_remove(self, *args)
    __swig_getmethods__["v"] = lambda x: _cmio.ILImageService_v
    if _newclass:v = staticmethod(_cmio.ILImageService_v)
    __swig_getmethods__["init"] = lambda x: _cmio.ILImageService_init
    if _newclass:init = staticmethod(_cmio.ILImageService_init)
ILImageService_swigregister = _cmio.ILImageService_swigregister
ILImageService_swigregister(ILImageService)

def ILImageService_v():
  return _cmio.ILImageService_v()
ILImageService_v = _cmio.ILImageService_v

def ILImageService_init():
  return _cmio.ILImageService_init()
ILImageService_init = _cmio.ILImageService_init

class Texture(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Texture, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Texture, name)
    __repr__ = _swig_repr
    def __init__(self, name = ""): 
        this = _cmio.new_Texture(name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_Texture
    __del__ = lambda self : None;
    def accept(self, *args): return _cmio.Texture_accept(self, *args)
Texture_swigregister = _cmio.Texture_swigregister
Texture_swigregister(Texture)

class TextureMapping(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextureMapping, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TextureMapping, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_TextureMapping
    __del__ = lambda self : None;
    def get_polygon_count(self): return _cmio.TextureMapping_get_polygon_count(self)
    def _get_polygon_vertex_count(self, *args): return _cmio.TextureMapping__get_polygon_vertex_count(self, *args)
    def get_polygon_vertex_count(self, *args): return _cmio.TextureMapping_get_polygon_vertex_count(self, *args)
    def _get_polygon_tex_coord(self, *args): return _cmio.TextureMapping__get_polygon_tex_coord(self, *args)
    def get_polygon_tex_coord(self, *args): return _cmio.TextureMapping_get_polygon_tex_coord(self, *args)
    def accept(self, *args): return _cmio.TextureMapping_accept(self, *args)
TextureMapping_swigregister = _cmio.TextureMapping_swigregister
TextureMapping_swigregister(TextureMapping)

class IndexedTextureMapping(TextureMapping):
    __swig_setmethods__ = {}
    for _s in [TextureMapping]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexedTextureMapping, name, value)
    __swig_getmethods__ = {}
    for _s in [TextureMapping]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexedTextureMapping, name)
    __repr__ = _swig_repr
    def __init__(self, name = ""): 
        this = _cmio.new_IndexedTextureMapping(name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_IndexedTextureMapping
    __del__ = lambda self : None;
    def _get_tex_coord(self, *args): return _cmio.IndexedTextureMapping__get_tex_coord(self, *args)
    def get_tex_coord(self, *args): return _cmio.IndexedTextureMapping_get_tex_coord(self, *args)
    def append_tex_coord(self, *args): return _cmio.IndexedTextureMapping_append_tex_coord(self, *args)
    def get_tex_coord_count(self): return _cmio.IndexedTextureMapping_get_tex_coord_count(self)
    def get_polygon_count(self): return _cmio.IndexedTextureMapping_get_polygon_count(self)
    def _get_polygon_vertex_count(self, *args): return _cmio.IndexedTextureMapping__get_polygon_vertex_count(self, *args)
    def _get_polygon_tex_coord(self, *args): return _cmio.IndexedTextureMapping__get_polygon_tex_coord(self, *args)
    def _get_polygon_tex_coord_index(self, *args): return _cmio.IndexedTextureMapping__get_polygon_tex_coord_index(self, *args)
    def get_polygon_tex_coord_index(self, *args): return _cmio.IndexedTextureMapping_get_polygon_tex_coord_index(self, *args)
    def append_new_polgon(self): return _cmio.IndexedTextureMapping_append_new_polgon(self)
    def append_tex_coord_index_to_last_polygon(self, *args): return _cmio.IndexedTextureMapping_append_tex_coord_index_to_last_polygon(self, *args)
    def accept(self, *args): return _cmio.IndexedTextureMapping_accept(self, *args)
    def tex_coords(self):
    	for i in xrange(self.get_tex_coord_count()):
    		yield self.get_tex_coord(i)

    def triangle_tex_coord_indices(self):
    	for i in xrange(self.get_mapping_count()):
    		yield self.get_triangle_tex_coord_indices(i)

IndexedTextureMapping_swigregister = _cmio.IndexedTextureMapping_swigregister
IndexedTextureMapping_swigregister(IndexedTextureMapping)

class ILTexture(Texture):
    __swig_setmethods__ = {}
    for _s in [Texture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ILTexture, name, value)
    __swig_getmethods__ = {}
    for _s in [Texture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ILTexture, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_ILTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_ILTexture
    __del__ = lambda self : None;
    def get_image(self): return _cmio.ILTexture_get_image(self)
    def accept(self, *args): return _cmio.ILTexture_accept(self, *args)
ILTexture_swigregister = _cmio.ILTexture_swigregister
ILTexture_swigregister(ILTexture)

class LazyILTexture(Texture):
    __swig_setmethods__ = {}
    for _s in [Texture]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LazyILTexture, name, value)
    __swig_getmethods__ = {}
    for _s in [Texture]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LazyILTexture, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_LazyILTexture(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_LazyILTexture
    __del__ = lambda self : None;
    def get_il_texture(self): return _cmio.LazyILTexture_get_il_texture(self)
    def accept(self, *args): return _cmio.LazyILTexture_accept(self, *args)
LazyILTexture_swigregister = _cmio.LazyILTexture_swigregister
LazyILTexture_swigregister(LazyILTexture)

class Material(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Material, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Material, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_Material
    __del__ = lambda self : None;
    def accept(self, *args): return _cmio.Material_accept(self, *args)
Material_swigregister = _cmio.Material_swigregister
Material_swigregister(Material)

class MaterialList(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialList, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialList, name)
    __repr__ = _swig_repr
    def __init__(self, name = ""): 
        this = _cmio.new_MaterialList(name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_MaterialList
    __del__ = lambda self : None;
    def append_material(self, *args): return _cmio.MaterialList_append_material(self, *args)
    def get_material_count(self): return _cmio.MaterialList_get_material_count(self)
    def _get_material(self, *args): return _cmio.MaterialList__get_material(self, *args)
    def get_material(self, *args): return _cmio.MaterialList_get_material(self, *args)
    def accept(self, visitor):
    	visitor.visit_MaterialList(self)
    	
    def materials(self):
    	for i in xrange(self.get_material_count()):
    		yield self.get_material(i)

MaterialList_swigregister = _cmio.MaterialList_swigregister
MaterialList_swigregister(MaterialList)

class MaterialMapping(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialMapping, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialMapping, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_MaterialMapping
    __del__ = lambda self : None;
    def _get_material(self, *args): return _cmio.MaterialMapping__get_material(self, *args)
    def get_material(self, *args): return _cmio.MaterialMapping_get_material(self, *args)
    def get_polygon_count(self): return _cmio.MaterialMapping_get_polygon_count(self)
    def accept(self, *args): return _cmio.MaterialMapping_accept(self, *args)
    def mappings(self):
    	for i in xrange(self.get_mapping_count()):
    		yield self.get_mapping(i)

MaterialMapping_swigregister = _cmio.MaterialMapping_swigregister
MaterialMapping_swigregister(MaterialMapping)

class MqoMaterial(Material):
    __swig_setmethods__ = {}
    for _s in [Material]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MqoMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [Material]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MqoMaterial, name)
    __repr__ = _swig_repr
    __swig_setmethods__["color"] = _cmio.MqoMaterial_color_set
    __swig_getmethods__["color"] = _cmio.MqoMaterial_color_get
    if _newclass:color = _swig_property(_cmio.MqoMaterial_color_get, _cmio.MqoMaterial_color_set)
    __swig_setmethods__["ambient"] = _cmio.MqoMaterial_ambient_set
    __swig_getmethods__["ambient"] = _cmio.MqoMaterial_ambient_get
    if _newclass:ambient = _swig_property(_cmio.MqoMaterial_ambient_get, _cmio.MqoMaterial_ambient_set)
    __swig_setmethods__["diffuse"] = _cmio.MqoMaterial_diffuse_set
    __swig_getmethods__["diffuse"] = _cmio.MqoMaterial_diffuse_get
    if _newclass:diffuse = _swig_property(_cmio.MqoMaterial_diffuse_get, _cmio.MqoMaterial_diffuse_set)
    __swig_setmethods__["specular"] = _cmio.MqoMaterial_specular_set
    __swig_getmethods__["specular"] = _cmio.MqoMaterial_specular_get
    if _newclass:specular = _swig_property(_cmio.MqoMaterial_specular_get, _cmio.MqoMaterial_specular_set)
    __swig_setmethods__["emission"] = _cmio.MqoMaterial_emission_set
    __swig_getmethods__["emission"] = _cmio.MqoMaterial_emission_get
    if _newclass:emission = _swig_property(_cmio.MqoMaterial_emission_get, _cmio.MqoMaterial_emission_set)
    __swig_setmethods__["power"] = _cmio.MqoMaterial_power_set
    __swig_getmethods__["power"] = _cmio.MqoMaterial_power_get
    if _newclass:power = _swig_property(_cmio.MqoMaterial_power_get, _cmio.MqoMaterial_power_set)
    def __init__(self, *args): 
        this = _cmio.new_MqoMaterial(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_MqoMaterial
    __del__ = lambda self : None;
    def accept(self, *args): return _cmio.MqoMaterial_accept(self, *args)
MqoMaterial_swigregister = _cmio.MqoMaterial_swigregister
MqoMaterial_swigregister(MqoMaterial)

class PhongMaterial(Material):
    __swig_setmethods__ = {}
    for _s in [Material]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PhongMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [Material]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PhongMaterial, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ambient"] = _cmio.PhongMaterial_ambient_set
    __swig_getmethods__["ambient"] = _cmio.PhongMaterial_ambient_get
    if _newclass:ambient = _swig_property(_cmio.PhongMaterial_ambient_get, _cmio.PhongMaterial_ambient_set)
    __swig_setmethods__["diffuse"] = _cmio.PhongMaterial_diffuse_set
    __swig_getmethods__["diffuse"] = _cmio.PhongMaterial_diffuse_get
    if _newclass:diffuse = _swig_property(_cmio.PhongMaterial_diffuse_get, _cmio.PhongMaterial_diffuse_set)
    __swig_setmethods__["specular"] = _cmio.PhongMaterial_specular_set
    __swig_getmethods__["specular"] = _cmio.PhongMaterial_specular_get
    if _newclass:specular = _swig_property(_cmio.PhongMaterial_specular_get, _cmio.PhongMaterial_specular_set)
    __swig_setmethods__["emission"] = _cmio.PhongMaterial_emission_set
    __swig_getmethods__["emission"] = _cmio.PhongMaterial_emission_get
    if _newclass:emission = _swig_property(_cmio.PhongMaterial_emission_get, _cmio.PhongMaterial_emission_set)
    __swig_setmethods__["shininess"] = _cmio.PhongMaterial_shininess_set
    __swig_getmethods__["shininess"] = _cmio.PhongMaterial_shininess_get
    if _newclass:shininess = _swig_property(_cmio.PhongMaterial_shininess_get, _cmio.PhongMaterial_shininess_set)
    def __init__(self, *args): 
        this = _cmio.new_PhongMaterial(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_PhongMaterial
    __del__ = lambda self : None;
    def accept(self, *args): return _cmio.PhongMaterial_accept(self, *args)
PhongMaterial_swigregister = _cmio.PhongMaterial_swigregister
PhongMaterial_swigregister(PhongMaterial)

class TexturedMqoMaterial(MqoMaterial):
    __swig_setmethods__ = {}
    for _s in [MqoMaterial]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexturedMqoMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [MqoMaterial]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexturedMqoMaterial, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_TexturedMqoMaterial(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_TexturedMqoMaterial
    __del__ = lambda self : None;
    def get_texture(self): return _cmio.TexturedMqoMaterial_get_texture(self)
    def set_texture(self, *args): return _cmio.TexturedMqoMaterial_set_texture(self, *args)
    def accept(self, *args): return _cmio.TexturedMqoMaterial_accept(self, *args)
TexturedMqoMaterial_swigregister = _cmio.TexturedMqoMaterial_swigregister
TexturedMqoMaterial_swigregister(TexturedMqoMaterial)

class TexturedPhongMaterial(PhongMaterial):
    __swig_setmethods__ = {}
    for _s in [PhongMaterial]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TexturedPhongMaterial, name, value)
    __swig_getmethods__ = {}
    for _s in [PhongMaterial]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TexturedPhongMaterial, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_TexturedPhongMaterial(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_TexturedPhongMaterial
    __del__ = lambda self : None;
    def get_texture(self): return _cmio.TexturedPhongMaterial_get_texture(self)
    def set_texture(self, *args): return _cmio.TexturedPhongMaterial_set_texture(self, *args)
    def accept(self, *args): return _cmio.TexturedPhongMaterial_accept(self, *args)
TexturedPhongMaterial_swigregister = _cmio.TexturedPhongMaterial_swigregister
TexturedPhongMaterial_swigregister(TexturedPhongMaterial)

class ByPolygonMaterialMapping(MaterialMapping):
    __swig_setmethods__ = {}
    for _s in [MaterialMapping]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ByPolygonMaterialMapping, name, value)
    __swig_getmethods__ = {}
    for _s in [MaterialMapping]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ByPolygonMaterialMapping, name)
    __repr__ = _swig_repr
    def __init__(self, name = ""): 
        this = _cmio.new_ByPolygonMaterialMapping(name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_ByPolygonMaterialMapping
    __del__ = lambda self : None;
    def _get_material(self, *args): return _cmio.ByPolygonMaterialMapping__get_material(self, *args)
    def append_mapping(self, *args): return _cmio.ByPolygonMaterialMapping_append_mapping(self, *args)
    def get_polygon_count(self): return _cmio.ByPolygonMaterialMapping_get_polygon_count(self)
    def accept(self, *args): return _cmio.ByPolygonMaterialMapping_accept(self, *args)
ByPolygonMaterialMapping_swigregister = _cmio.ByPolygonMaterialMapping_swigregister
ByPolygonMaterialMapping_swigregister(ByPolygonMaterialMapping)

class JointChange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointChange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointChange, name)
    __repr__ = _swig_repr
    __swig_setmethods__["position"] = _cmio.JointChange_position_set
    __swig_getmethods__["position"] = _cmio.JointChange_position_get
    if _newclass:position = _swig_property(_cmio.JointChange_position_get, _cmio.JointChange_position_set)
    __swig_setmethods__["orientation"] = _cmio.JointChange_orientation_set
    __swig_getmethods__["orientation"] = _cmio.JointChange_orientation_get
    if _newclass:orientation = _swig_property(_cmio.JointChange_orientation_get, _cmio.JointChange_orientation_set)
    def __init__(self, *args): 
        this = _cmio.new_JointChange(*args)
        try: self.this.append(this)
        except: self.this = this
    def __copy__(self): return _cmio.JointChange___copy__(self)
    def is_near(self, *args): return _cmio.JointChange_is_near(self, *args)
    __swig_destroy__ = _cmio.delete_JointChange
    __del__ = lambda self : None;
JointChange_swigregister = _cmio.JointChange_swigregister
JointChange_swigregister(JointChange)

class Joint(ReferenceCounted):
    __swig_setmethods__ = {}
    for _s in [ReferenceCounted]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Joint, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceCounted]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Joint, name)
    __repr__ = _swig_repr
    __swig_setmethods__["index"] = _cmio.Joint_index_set
    __swig_getmethods__["index"] = _cmio.Joint_index_get
    if _newclass:index = _swig_property(_cmio.Joint_index_get, _cmio.Joint_index_set)
    __swig_setmethods__["parent_index"] = _cmio.Joint_parent_index_set
    __swig_getmethods__["parent_index"] = _cmio.Joint_parent_index_get
    if _newclass:parent_index = _swig_property(_cmio.Joint_parent_index_get, _cmio.Joint_parent_index_set)
    __swig_setmethods__["position"] = _cmio.Joint_position_set
    __swig_getmethods__["position"] = _cmio.Joint_position_get
    if _newclass:position = _swig_property(_cmio.Joint_position_get, _cmio.Joint_position_set)
    __swig_setmethods__["orientation"] = _cmio.Joint_orientation_set
    __swig_getmethods__["orientation"] = _cmio.Joint_orientation_get
    if _newclass:orientation = _swig_property(_cmio.Joint_orientation_get, _cmio.Joint_orientation_set)
    def __init__(self, *args): 
        this = _cmio.new_Joint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_Joint
    __del__ = lambda self : None;
    def get_name(self): return _cmio.Joint_get_name(self)
    def get_translation_matrix(self): return _cmio.Joint_get_translation_matrix(self)
    def get_translation_transform(self): return _cmio.Joint_get_translation_transform(self)
    def get_rotation_matrix(self): return _cmio.Joint_get_rotation_matrix(self)
    def get_rotation_transform(self): return _cmio.Joint_get_rotation_transform(self)
    def apply_joint_change(self, *args): return _cmio.Joint_apply_joint_change(self, *args)
    def get_joint_change(self, *args): return _cmio.Joint_get_joint_change(self, *args)
Joint_swigregister = _cmio.Joint_swigregister
Joint_swigregister(Joint)

class NameJointChangePair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NameJointChangePair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NameJointChangePair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_NameJointChangePair(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_name(self): return _cmio.NameJointChangePair_get_name(self)
    def get_joint_change(self): return _cmio.NameJointChangePair_get_joint_change(self)
    __swig_destroy__ = _cmio.delete_NameJointChangePair
    __del__ = lambda self : None;
NameJointChangePair_swigregister = _cmio.NameJointChangePair_swigregister
NameJointChangePair_swigregister(NameJointChangePair)

class Pose(ReferenceCounted):
    __swig_setmethods__ = {}
    for _s in [ReferenceCounted]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Pose, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceCounted]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Pose, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_Pose(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_Pose
    __del__ = lambda self : None;
    def has_joint_change_of(self, *args): return _cmio.Pose_has_joint_change_of(self, *args)
    def get_joint_change(self, *args): return _cmio.Pose_get_joint_change(self, *args)
    def set_joint_change(self, *args): return _cmio.Pose_set_joint_change(self, *args)
    def clear(self): return _cmio.Pose_clear(self)
    def get_iterator(self): return _cmio.Pose_get_iterator(self)
    def get_name_joint_change_pairs(self):
    	return self.get_iterator()

Pose_swigregister = _cmio.Pose_swigregister
Pose_swigregister(Pose)

class NameJointChangePairIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NameJointChangePairIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NameJointChangePairIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_NameJointChangePairIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_NameJointChangePairIterator
    __del__ = lambda self : None;
    def has_next(self): return _cmio.NameJointChangePairIterator_has_next(self)
    def get_next(self): return _cmio.NameJointChangePairIterator_get_next(self)
    def __iter__(self):
    	return self

    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

NameJointChangePairIterator_swigregister = _cmio.NameJointChangePairIterator_swigregister
NameJointChangePairIterator_swigregister(NameJointChangePairIterator)

class Armature(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Armature, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Armature, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_Armature(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_Armature
    __del__ = lambda self : None;
    def append_joint(self, *args): return _cmio.Armature_append_joint(self, *args)
    def _get_joint(self, *args): return _cmio.Armature__get_joint(self, *args)
    def _set_joint_parameter(self, *args): return _cmio.Armature__set_joint_parameter(self, *args)
    def set_joint_parameter(self, *args): return _cmio.Armature_set_joint_parameter(self, *args)
    def get_joint(self, *args): return _cmio.Armature_get_joint(self, *args)
    def get_joint_count(self): return _cmio.Armature_get_joint_count(self)
    def _set_parent(self, *args): return _cmio.Armature__set_parent(self, *args)
    def set_parent(self, *args): return _cmio.Armature_set_parent(self, *args)
    def _get_joint_world_position(self, *args): return _cmio.Armature__get_joint_world_position(self, *args)
    def _get_joint_world_orientation(self, *args): return _cmio.Armature__get_joint_world_orientation(self, *args)
    def get_joint_world_position(self, *args): return _cmio.Armature_get_joint_world_position(self, *args)
    def get_joint_world_orientation(self, *args): return _cmio.Armature_get_joint_world_orientation(self, *args)
    def _get_joint_to_world_matrix(self, *args): return _cmio.Armature__get_joint_to_world_matrix(self, *args)
    def get_joint_to_world_matrix(self, *args): return _cmio.Armature_get_joint_to_world_matrix(self, *args)
    def _get_joint_to_world_transform(self, *args): return _cmio.Armature__get_joint_to_world_transform(self, *args)
    def get_joint_to_world_transform(self, *args): return _cmio.Armature_get_joint_to_world_transform(self, *args)
    def get_pose(self, *args): return _cmio.Armature_get_pose(self, *args)
    def morph(self, *args): return _cmio.Armature_morph(self, *args)
    def __copy__(self): return _cmio.Armature___copy__(self)
    def __deepcopy__(self): return _cmio.Armature___deepcopy__(self)
    def get_joint_iterator(self): return _cmio.Armature_get_joint_iterator(self)
    def get_joints(self):
    	return self.get_joint_iterator()

Armature_swigregister = _cmio.Armature_swigregister
Armature_swigregister(Armature)

class JointIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, JointIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_JointIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_JointIterator
    __del__ = lambda self : None;
    def has_next(self): return _cmio.JointIterator_has_next(self)
    def get_next(self): return _cmio.JointIterator_get_next(self)
    def __iter__(self):
    	return self

    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

JointIterator_swigregister = _cmio.JointIterator_swigregister
JointIterator_swigregister(JointIterator)

X_ROTATE = _cmio.X_ROTATE
Y_ROTATE = _cmio.Y_ROTATE
Z_ROTATE = _cmio.Z_ROTATE
X_TRANSLATE = _cmio.X_TRANSLATE
Y_TRANSLATE = _cmio.Y_TRANSLATE
Z_TRANSLATE = _cmio.Z_TRANSLATE
IK_JOINT_PARAMETER_COUNT = _cmio.IK_JOINT_PARAMETER_COUNT
class IKJointParameters(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKJointParameters, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKJointParameters, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cmio.new_IKJointParameters()
        try: self.this.append(this)
        except: self.this = this
    def __getitem__(self, *args): return _cmio.IKJointParameters___getitem__(self, *args)
    def __setitem__(self, *args): return _cmio.IKJointParameters___setitem__(self, *args)
    def is_near(self, *args): return _cmio.IKJointParameters_is_near(self, *args)
    def __copy__(self): return _cmio.IKJointParameters___copy__(self)
    def __deepcopy__(self): return _cmio.IKJointParameters___deepcopy__(self)
    X_ROTATE = 0
    Y_ROTATE = 1
    Z_ROTATE = 2
    X_TRANSLATE = 3
    Y_TRANSLATE = 4
    Z_TRANSLATE = 5

    __swig_destroy__ = _cmio.delete_IKJointParameters
    __del__ = lambda self : None;
IKJointParameters_swigregister = _cmio.IKJointParameters_swigregister
IKJointParameters_swigregister(IKJointParameters)

class IKEndEffector(ReferenceCounted):
    __swig_setmethods__ = {}
    for _s in [ReferenceCounted]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKEndEffector, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceCounted]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKEndEffector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_IKEndEffector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_IKEndEffector
    __del__ = lambda self : None;
    def get_index(self): return _cmio.IKEndEffector_get_index(self)
    def get_name(self): return _cmio.IKEndEffector_get_name(self)
    def append_ik_joint_index(self, *args): return _cmio.IKEndEffector_append_ik_joint_index(self, *args)
    def __copy__(self): return _cmio.IKEndEffector___copy__(self)
    def __deepcopy__(self): return _cmio.IKEndEffector___deepcopy__(self)
    def get_ik_joint_index_count(self): return _cmio.IKEndEffector_get_ik_joint_index_count(self)
    def _get_ik_joint_index(self, *args): return _cmio.IKEndEffector__get_ik_joint_index(self, *args)
    def get_ik_joint_index(self, *args): return _cmio.IKEndEffector_get_ik_joint_index(self, *args)
    def is_influenced_by(self, *args): return _cmio.IKEndEffector_is_influenced_by(self, *args)
IKEndEffector_swigregister = _cmio.IKEndEffector_swigregister
IKEndEffector_swigregister(IKEndEffector)

class IKJoint(ReferenceCounted):
    __swig_setmethods__ = {}
    for _s in [ReferenceCounted]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKJoint, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceCounted]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKJoint, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_IKJoint(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_IKJoint
    __del__ = lambda self : None;
    def get_name(self): return _cmio.IKJoint_get_name(self)
    def _set_limit(self, *args): return _cmio.IKJoint__set_limit(self, *args)
    def set_limit(self, *args): return _cmio.IKJoint_set_limit(self, *args)
    def _get_lower_bound(self, *args): return _cmio.IKJoint__get_lower_bound(self, *args)
    def get_lower_bound(self, *args): return _cmio.IKJoint_get_lower_bound(self, *args)
    def _get_upper_bound(self, *args): return _cmio.IKJoint__get_upper_bound(self, *args)
    def get_upper_bound(self, *args): return _cmio.IKJoint_get_upper_bound(self, *args)
    def _enable_parameter(self, *args): return _cmio.IKJoint__enable_parameter(self, *args)
    def enable_parameter(self, *args): return _cmio.IKJoint_enable_parameter(self, *args)
    def _disable_parameter(self, *args): return _cmio.IKJoint__disable_parameter(self, *args)
    def disable_parameter(self, *args): return _cmio.IKJoint_disable_parameter(self, *args)
    def _is_parameter_enabled(self, *args): return _cmio.IKJoint__is_parameter_enabled(self, *args)
    def is_parameter_enabled(self, *args): return _cmio.IKJoint_is_parameter_enabled(self, *args)
    def get_index(self): return _cmio.IKJoint_get_index(self)
    def _get_parameter(self, *args): return _cmio.IKJoint__get_parameter(self, *args)
    def get_parameter(self, *args): return _cmio.IKJoint_get_parameter(self, *args)
    def _set_parameter(self, *args): return _cmio.IKJoint__set_parameter(self, *args)
    def set_parameter(self, *args): return _cmio.IKJoint_set_parameter(self, *args)
    def _get_stiffness(self, *args): return _cmio.IKJoint__get_stiffness(self, *args)
    def get_stiffness(self, *args): return _cmio.IKJoint_get_stiffness(self, *args)
    def _set_stiffness(self, *args): return _cmio.IKJoint__set_stiffness(self, *args)
    def set_stiffness(self, *args): return _cmio.IKJoint_set_stiffness(self, *args)
    def assign_joint_parameters(self, *args): return _cmio.IKJoint_assign_joint_parameters(self, *args)
    def set_according_to_joint_change(self, *args): return _cmio.IKJoint_set_according_to_joint_change(self, *args)
    def get_yaw_quaternion(self): return _cmio.IKJoint_get_yaw_quaternion(self)
    def get_pitch_quaternion(self): return _cmio.IKJoint_get_pitch_quaternion(self)
    def get_roll_quaternion(self): return _cmio.IKJoint_get_roll_quaternion(self)
    def get_rotation_axis_in_joint_space(self, *args): return _cmio.IKJoint_get_rotation_axis_in_joint_space(self, *args)
    def get_position_change(self): return _cmio.IKJoint_get_position_change(self)
    def get_orientation_change(self): return _cmio.IKJoint_get_orientation_change(self)
    def get_yaw(self): return _cmio.IKJoint_get_yaw(self)
    def get_pitch(self): return _cmio.IKJoint_get_pitch(self)
    def get_roll(self): return _cmio.IKJoint_get_roll(self)
    def rotate(self, *args): return _cmio.IKJoint_rotate(self, *args)
    def _clamp_parameter(self, *args): return _cmio.IKJoint__clamp_parameter(self, *args)
    def clamp_parameter(self, *args): return _cmio.IKJoint_clamp_parameter(self, *args)
    def clamp_all_parameters(self): return _cmio.IKJoint_clamp_all_parameters(self)
    def get_rotation_axis_to_joint_rotation(self): return _cmio.IKJoint_get_rotation_axis_to_joint_rotation(self)
    def set_rotation_to_axis_joint_rotation(self, *args): return _cmio.IKJoint_set_rotation_to_axis_joint_rotation(self, *args)
    def get_dof(self): return _cmio.IKJoint_get_dof(self)
    def get_joint_change(self): return _cmio.IKJoint_get_joint_change(self)
    def clear_parameters(self): return _cmio.IKJoint_clear_parameters(self)
IKJoint_swigregister = _cmio.IKJoint_swigregister
IKJoint_swigregister(IKJoint)

class NamePositionPair(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NamePositionPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NamePositionPair, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_NamePositionPair(*args)
        try: self.this.append(this)
        except: self.this = this
    def get_name(self): return _cmio.NamePositionPair_get_name(self)
    def get_position(self): return _cmio.NamePositionPair_get_position(self)
    def set_position(self, *args): return _cmio.NamePositionPair_set_position(self, *args)
    __swig_destroy__ = _cmio.delete_NamePositionPair
    __del__ = lambda self : None;
NamePositionPair_swigregister = _cmio.NamePositionPair_swigregister
NamePositionPair_swigregister(NamePositionPair)

class IKEndEffectorGoals(ReferenceCounted):
    __swig_setmethods__ = {}
    for _s in [ReferenceCounted]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKEndEffectorGoals, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceCounted]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKEndEffectorGoals, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cmio.new_IKEndEffectorGoals()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_IKEndEffectorGoals
    __del__ = lambda self : None;
    def set_end_effector_position(self, *args): return _cmio.IKEndEffectorGoals_set_end_effector_position(self, *args)
    def get_end_effector_position(self, *args): return _cmio.IKEndEffectorGoals_get_end_effector_position(self, *args)
    def get_designated_end_effector_count(self): return _cmio.IKEndEffectorGoals_get_designated_end_effector_count(self)
    def get_end_effector_position_iterator(self): return _cmio.IKEndEffectorGoals_get_end_effector_position_iterator(self)
IKEndEffectorGoals_swigregister = _cmio.IKEndEffectorGoals_swigregister
IKEndEffectorGoals_swigregister(IKEndEffectorGoals)

class IKEndEffectorPositionIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKEndEffectorPositionIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKEndEffectorPositionIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_IKEndEffectorPositionIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_IKEndEffectorPositionIterator
    __del__ = lambda self : None;
    def has_next(self): return _cmio.IKEndEffectorPositionIterator_has_next(self)
    def get_next(self): return _cmio.IKEndEffectorPositionIterator_get_next(self)
    def __iter__(self):
    	return self

    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

IKEndEffectorPositionIterator_swigregister = _cmio.IKEndEffectorPositionIterator_swigregister
IKEndEffectorPositionIterator_swigregister(IKEndEffectorPositionIterator)

class IKPose(ReferenceCounted):
    __swig_setmethods__ = {}
    for _s in [ReferenceCounted]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKPose, name, value)
    __swig_getmethods__ = {}
    for _s in [ReferenceCounted]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKPose, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cmio.new_IKPose()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_IKPose
    __del__ = lambda self : None;
    def get_normal_pose(self): return _cmio.IKPose_get_normal_pose(self)
    def set_normal_pose(self, *args): return _cmio.IKPose_set_normal_pose(self, *args)
    def get_end_effector_goals(self): return _cmio.IKPose_get_end_effector_goals(self)
    def set_end_effector_goals(self, *args): return _cmio.IKPose_set_end_effector_goals(self, *args)
    def get_end_effector_indices_and_positions(self):
    	for i in xrange(self.get_designated_end_effector_count()):
    		index = self._get_end_effector_index_by_order(i)
    		position = self._get_end_effector_position_by_order(i)
    		yield (index, position)

IKPose_swigregister = _cmio.IKPose_swigregister
IKPose_swigregister(IKPose)

DEFAULT_MAX_ITERATION = _cmio.DEFAULT_MAX_ITERATION
DEFAULT_ERROR_THRESHOLD = _cmio.DEFAULT_ERROR_THRESHOLD
class IKArmature(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKArmature, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IKArmature, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_IKArmature(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_IKArmature
    __del__ = lambda self : None;
    def get_end_effector_count(self): return _cmio.IKArmature_get_end_effector_count(self)
    def get_end_effector(self, *args): return _cmio.IKArmature_get_end_effector(self, *args)
    def make_end_effector(self, *args): return _cmio.IKArmature_make_end_effector(self, *args)
    def get_end_effector_iterator(self): return _cmio.IKArmature_get_end_effector_iterator(self)
    def add_ik_joint_to_end_effector(self, *args): return _cmio.IKArmature_add_ik_joint_to_end_effector(self, *args)
    def get_ik_joint_count(self): return _cmio.IKArmature_get_ik_joint_count(self)
    def get_ik_joint(self, *args): return _cmio.IKArmature_get_ik_joint(self, *args)
    def make_ik_joint(self, *args): return _cmio.IKArmature_make_ik_joint(self, *args)
    def get_ik_joint_iterator(self): return _cmio.IKArmature_get_ik_joint_iterator(self)
    def get_morphed_armature(self): return _cmio.IKArmature_get_morphed_armature(self)
    def get_rest_armature(self): return _cmio.IKArmature_get_rest_armature(self)
    def solve(self, *args): return _cmio.IKArmature_solve(self, *args)
    def solve_for_pose(self, *args): return _cmio.IKArmature_solve_for_pose(self, *args)
    def get_ik_joints(self):
    	return self.get_ik_joint_iterator()
    	
    def get_end_effectors(self):
    	return self.get_end_effector_iterator()

IKArmature_swigregister = _cmio.IKArmature_swigregister
IKArmature_swigregister(IKArmature)

class IKEndEffectorIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKEndEffectorIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKEndEffectorIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_IKEndEffectorIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_IKEndEffectorIterator
    __del__ = lambda self : None;
    def get_next(self): return _cmio.IKEndEffectorIterator_get_next(self)
    def has_next(self): return _cmio.IKEndEffectorIterator_has_next(self)
    def __iter__(self):
    	return self
    	
    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

IKEndEffectorIterator_swigregister = _cmio.IKEndEffectorIterator_swigregister
IKEndEffectorIterator_swigregister(IKEndEffectorIterator)

class IKJointIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IKJointIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IKJointIterator, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_IKJointIterator(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_IKJointIterator
    __del__ = lambda self : None;
    def get_next(self): return _cmio.IKJointIterator_get_next(self)
    def has_next(self): return _cmio.IKJointIterator_has_next(self)
    def __iter__(self):
    	return self
    	
    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

IKJointIterator_swigregister = _cmio.IKJointIterator_swigregister
IKJointIterator_swigregister(IKJointIterator)

class JointWeightMapping(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, JointWeightMapping, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, JointWeightMapping, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_JointWeightMapping
    __del__ = lambda self : None;
    def get_vertex_count(self): return _cmio.JointWeightMapping_get_vertex_count(self)
    def get_influencing_joint_count(self, *args): return _cmio.JointWeightMapping_get_influencing_joint_count(self, *args)
    def get_influencing_joint_index(self, *args): return _cmio.JointWeightMapping_get_influencing_joint_index(self, *args)
    def get_influencing_joint_weight(self, *args): return _cmio.JointWeightMapping_get_influencing_joint_weight(self, *args)
JointWeightMapping_swigregister = _cmio.JointWeightMapping_swigregister
JointWeightMapping_swigregister(JointWeightMapping)

class IndexedJointWeightMapping(JointWeightMapping):
    __swig_setmethods__ = {}
    for _s in [JointWeightMapping]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, IndexedJointWeightMapping, name, value)
    __swig_getmethods__ = {}
    for _s in [JointWeightMapping]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, IndexedJointWeightMapping, name)
    __repr__ = _swig_repr
    def __init__(self, uid = ""): 
        this = _cmio.new_IndexedJointWeightMapping(uid)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_IndexedJointWeightMapping
    __del__ = lambda self : None;
    def get_vertex_count(self): return _cmio.IndexedJointWeightMapping_get_vertex_count(self)
    def append_new_vertex(self): return _cmio.IndexedJointWeightMapping_append_new_vertex(self)
    def _append_joint_weight(self, *args): return _cmio.IndexedJointWeightMapping__append_joint_weight(self, *args)
    def append_joint_weight(self, *args): return _cmio.IndexedJointWeightMapping_append_joint_weight(self, *args)
    def _get_influencing_joint_count(self, *args): return _cmio.IndexedJointWeightMapping__get_influencing_joint_count(self, *args)
    def get_influencing_joint_count(self, *args): return _cmio.IndexedJointWeightMapping_get_influencing_joint_count(self, *args)
    def _get_influencing_joint_index(self, *args): return _cmio.IndexedJointWeightMapping__get_influencing_joint_index(self, *args)
    def get_influencing_joint_index(self, *args): return _cmio.IndexedJointWeightMapping_get_influencing_joint_index(self, *args)
    def _get_influencing_joint_weight(self, *args): return _cmio.IndexedJointWeightMapping__get_influencing_joint_weight(self, *args)
    def get_influencing_joint_weight(self, *args): return _cmio.IndexedJointWeightMapping_get_influencing_joint_weight(self, *args)
IndexedJointWeightMapping_swigregister = _cmio.IndexedJointWeightMapping_swigregister
IndexedJointWeightMapping_swigregister(IndexedJointWeightMapping)

class Curve_float(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curve_float, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curve_float, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_Curve_float
    __del__ = lambda self : None;
    def evaluate(self, *args): return _cmio.Curve_float_evaluate(self, *args)
    def get_range_lower_bound(self): return _cmio.Curve_float_get_range_lower_bound(self)
    def get_range_upper_bound(self): return _cmio.Curve_float_get_range_upper_bound(self)
    def __call__(self, *args): return _cmio.Curve_float___call__(self, *args)
Curve_float_swigregister = _cmio.Curve_float_swigregister
Curve_float_swigregister(Curve_float)

class Curve_Vector3(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curve_Vector3, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curve_Vector3, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_Curve_Vector3
    __del__ = lambda self : None;
    def evaluate(self, *args): return _cmio.Curve_Vector3_evaluate(self, *args)
    def get_range_lower_bound(self): return _cmio.Curve_Vector3_get_range_lower_bound(self)
    def get_range_upper_bound(self): return _cmio.Curve_Vector3_get_range_upper_bound(self)
    def __call__(self, *args): return _cmio.Curve_Vector3___call__(self, *args)
Curve_Vector3_swigregister = _cmio.Curve_Vector3_swigregister
Curve_Vector3_swigregister(Curve_Vector3)

class Curve_Quaternion(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curve_Quaternion, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curve_Quaternion, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_Curve_Quaternion
    __del__ = lambda self : None;
    def evaluate(self, *args): return _cmio.Curve_Quaternion_evaluate(self, *args)
    def get_range_lower_bound(self): return _cmio.Curve_Quaternion_get_range_lower_bound(self)
    def get_range_upper_bound(self): return _cmio.Curve_Quaternion_get_range_upper_bound(self)
    def __call__(self, *args): return _cmio.Curve_Quaternion___call__(self, *args)
Curve_Quaternion_swigregister = _cmio.Curve_Quaternion_swigregister
Curve_Quaternion_swigregister(Curve_Quaternion)

class Curve_JointChange(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Curve_JointChange, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Curve_JointChange, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_Curve_JointChange
    __del__ = lambda self : None;
    def evaluate(self, *args): return _cmio.Curve_JointChange_evaluate(self, *args)
    def get_range_lower_bound(self): return _cmio.Curve_JointChange_get_range_lower_bound(self)
    def get_range_upper_bound(self): return _cmio.Curve_JointChange_get_range_upper_bound(self)
    def __call__(self, *args): return _cmio.Curve_JointChange___call__(self, *args)
Curve_JointChange_swigregister = _cmio.Curve_JointChange_swigregister
Curve_JointChange_swigregister(Curve_JointChange)

class Polyline_float(Curve_float):
    __swig_setmethods__ = {}
    for _s in [Curve_float]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polyline_float, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve_float]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polyline_float, name)
    __repr__ = _swig_repr
    def __init__(self, uid = ""): 
        this = _cmio.new_Polyline_float(uid)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_Polyline_float
    __del__ = lambda self : None;
    def zero(self): return _cmio.Polyline_float_zero(self)
    def interpolate(self, *args): return _cmio.Polyline_float_interpolate(self, *args)
    def evaluate(self, *args): return _cmio.Polyline_float_evaluate(self, *args)
    def get_range_lower_bound(self): return _cmio.Polyline_float_get_range_lower_bound(self)
    def get_range_upper_bound(self): return _cmio.Polyline_float_get_range_upper_bound(self)
    def get_control_point_count(self): return _cmio.Polyline_float_get_control_point_count(self)
    def set_control_point(self, *args): return _cmio.Polyline_float_set_control_point(self, *args)
    def get_control_point_iterator(self): return _cmio.Polyline_float_get_control_point_iterator(self)
    def get_control_points(self):
    	return self.get_control_point_iterator()

Polyline_float_swigregister = _cmio.Polyline_float_swigregister
Polyline_float_swigregister(Polyline_float)

class PolylineControlPoint_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolylineControlPoint_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolylineControlPoint_float, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _cmio.PolylineControlPoint_float_time_set
    __swig_getmethods__["time"] = _cmio.PolylineControlPoint_float_time_get
    if _newclass:time = _swig_property(_cmio.PolylineControlPoint_float_time_get, _cmio.PolylineControlPoint_float_time_set)
    __swig_setmethods__["value"] = _cmio.PolylineControlPoint_float_value_set
    __swig_getmethods__["value"] = _cmio.PolylineControlPoint_float_value_get
    if _newclass:value = _swig_property(_cmio.PolylineControlPoint_float_value_get, _cmio.PolylineControlPoint_float_value_set)
    def __init__(self, *args): 
        this = _cmio.new_PolylineControlPoint_float(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPoint_float
    __del__ = lambda self : None;
PolylineControlPoint_float_swigregister = _cmio.PolylineControlPoint_float_swigregister
PolylineControlPoint_float_swigregister(PolylineControlPoint_float)

class PolylineControlPointIterator_float(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolylineControlPointIterator_float, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolylineControlPointIterator_float, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_PolylineControlPointIterator_float(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPointIterator_float
    __del__ = lambda self : None;
    def has_next(self): return _cmio.PolylineControlPointIterator_float_has_next(self)
    def get_next(self): return _cmio.PolylineControlPointIterator_float_get_next(self)
    def peek(self): return _cmio.PolylineControlPointIterator_float_peek(self)
    def __iter__(self):
    	return self
    	
    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

PolylineControlPointIterator_float_swigregister = _cmio.PolylineControlPointIterator_float_swigregister
PolylineControlPointIterator_float_swigregister(PolylineControlPointIterator_float)

class Polyline_Vector3(Curve_Vector3):
    __swig_setmethods__ = {}
    for _s in [Curve_Vector3]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polyline_Vector3, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve_Vector3]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polyline_Vector3, name)
    __repr__ = _swig_repr
    def __init__(self, uid = ""): 
        this = _cmio.new_Polyline_Vector3(uid)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_Polyline_Vector3
    __del__ = lambda self : None;
    def zero(self): return _cmio.Polyline_Vector3_zero(self)
    def interpolate(self, *args): return _cmio.Polyline_Vector3_interpolate(self, *args)
    def evaluate(self, *args): return _cmio.Polyline_Vector3_evaluate(self, *args)
    def get_range_lower_bound(self): return _cmio.Polyline_Vector3_get_range_lower_bound(self)
    def get_range_upper_bound(self): return _cmio.Polyline_Vector3_get_range_upper_bound(self)
    def get_control_point_count(self): return _cmio.Polyline_Vector3_get_control_point_count(self)
    def set_control_point(self, *args): return _cmio.Polyline_Vector3_set_control_point(self, *args)
    def get_control_point_iterator(self): return _cmio.Polyline_Vector3_get_control_point_iterator(self)
    def get_control_points(self):
    	return self.get_control_point_iterator()

Polyline_Vector3_swigregister = _cmio.Polyline_Vector3_swigregister
Polyline_Vector3_swigregister(Polyline_Vector3)

class PolylineControlPoint_Vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolylineControlPoint_Vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolylineControlPoint_Vector3, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _cmio.PolylineControlPoint_Vector3_time_set
    __swig_getmethods__["time"] = _cmio.PolylineControlPoint_Vector3_time_get
    if _newclass:time = _swig_property(_cmio.PolylineControlPoint_Vector3_time_get, _cmio.PolylineControlPoint_Vector3_time_set)
    __swig_setmethods__["value"] = _cmio.PolylineControlPoint_Vector3_value_set
    __swig_getmethods__["value"] = _cmio.PolylineControlPoint_Vector3_value_get
    if _newclass:value = _swig_property(_cmio.PolylineControlPoint_Vector3_value_get, _cmio.PolylineControlPoint_Vector3_value_set)
    def __init__(self, *args): 
        this = _cmio.new_PolylineControlPoint_Vector3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPoint_Vector3
    __del__ = lambda self : None;
PolylineControlPoint_Vector3_swigregister = _cmio.PolylineControlPoint_Vector3_swigregister
PolylineControlPoint_Vector3_swigregister(PolylineControlPoint_Vector3)

class PolylineControlPointIterator_Vector3(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolylineControlPointIterator_Vector3, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolylineControlPointIterator_Vector3, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_PolylineControlPointIterator_Vector3(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPointIterator_Vector3
    __del__ = lambda self : None;
    def has_next(self): return _cmio.PolylineControlPointIterator_Vector3_has_next(self)
    def get_next(self): return _cmio.PolylineControlPointIterator_Vector3_get_next(self)
    def peek(self): return _cmio.PolylineControlPointIterator_Vector3_peek(self)
    def __iter__(self):
    	return self
    	
    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

PolylineControlPointIterator_Vector3_swigregister = _cmio.PolylineControlPointIterator_Vector3_swigregister
PolylineControlPointIterator_Vector3_swigregister(PolylineControlPointIterator_Vector3)

class Polyline_Quaternion(Curve_Quaternion):
    __swig_setmethods__ = {}
    for _s in [Curve_Quaternion]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polyline_Quaternion, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve_Quaternion]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polyline_Quaternion, name)
    __repr__ = _swig_repr
    def __init__(self, uid = ""): 
        this = _cmio.new_Polyline_Quaternion(uid)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_Polyline_Quaternion
    __del__ = lambda self : None;
    def zero(self): return _cmio.Polyline_Quaternion_zero(self)
    def interpolate(self, *args): return _cmio.Polyline_Quaternion_interpolate(self, *args)
    def evaluate(self, *args): return _cmio.Polyline_Quaternion_evaluate(self, *args)
    def get_range_lower_bound(self): return _cmio.Polyline_Quaternion_get_range_lower_bound(self)
    def get_range_upper_bound(self): return _cmio.Polyline_Quaternion_get_range_upper_bound(self)
    def get_control_point_count(self): return _cmio.Polyline_Quaternion_get_control_point_count(self)
    def set_control_point(self, *args): return _cmio.Polyline_Quaternion_set_control_point(self, *args)
    def get_control_point_iterator(self): return _cmio.Polyline_Quaternion_get_control_point_iterator(self)
    def get_control_points(self):
    	return self.get_control_point_iterator()

Polyline_Quaternion_swigregister = _cmio.Polyline_Quaternion_swigregister
Polyline_Quaternion_swigregister(Polyline_Quaternion)

class PolylineControlPoint_Quaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolylineControlPoint_Quaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolylineControlPoint_Quaternion, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _cmio.PolylineControlPoint_Quaternion_time_set
    __swig_getmethods__["time"] = _cmio.PolylineControlPoint_Quaternion_time_get
    if _newclass:time = _swig_property(_cmio.PolylineControlPoint_Quaternion_time_get, _cmio.PolylineControlPoint_Quaternion_time_set)
    __swig_setmethods__["value"] = _cmio.PolylineControlPoint_Quaternion_value_set
    __swig_getmethods__["value"] = _cmio.PolylineControlPoint_Quaternion_value_get
    if _newclass:value = _swig_property(_cmio.PolylineControlPoint_Quaternion_value_get, _cmio.PolylineControlPoint_Quaternion_value_set)
    def __init__(self, *args): 
        this = _cmio.new_PolylineControlPoint_Quaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPoint_Quaternion
    __del__ = lambda self : None;
PolylineControlPoint_Quaternion_swigregister = _cmio.PolylineControlPoint_Quaternion_swigregister
PolylineControlPoint_Quaternion_swigregister(PolylineControlPoint_Quaternion)

class PolylineControlPointIterator_Quaternion(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolylineControlPointIterator_Quaternion, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolylineControlPointIterator_Quaternion, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_PolylineControlPointIterator_Quaternion(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPointIterator_Quaternion
    __del__ = lambda self : None;
    def has_next(self): return _cmio.PolylineControlPointIterator_Quaternion_has_next(self)
    def get_next(self): return _cmio.PolylineControlPointIterator_Quaternion_get_next(self)
    def peek(self): return _cmio.PolylineControlPointIterator_Quaternion_peek(self)
    def __iter__(self):
    	return self
    	
    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

PolylineControlPointIterator_Quaternion_swigregister = _cmio.PolylineControlPointIterator_Quaternion_swigregister
PolylineControlPointIterator_Quaternion_swigregister(PolylineControlPointIterator_Quaternion)

class Polyline_JointChange(Curve_JointChange):
    __swig_setmethods__ = {}
    for _s in [Curve_JointChange]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Polyline_JointChange, name, value)
    __swig_getmethods__ = {}
    for _s in [Curve_JointChange]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Polyline_JointChange, name)
    __repr__ = _swig_repr
    def __init__(self, uid = ""): 
        this = _cmio.new_Polyline_JointChange(uid)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_Polyline_JointChange
    __del__ = lambda self : None;
    def zero(self): return _cmio.Polyline_JointChange_zero(self)
    def interpolate(self, *args): return _cmio.Polyline_JointChange_interpolate(self, *args)
    def evaluate(self, *args): return _cmio.Polyline_JointChange_evaluate(self, *args)
    def get_range_lower_bound(self): return _cmio.Polyline_JointChange_get_range_lower_bound(self)
    def get_range_upper_bound(self): return _cmio.Polyline_JointChange_get_range_upper_bound(self)
    def get_control_point_count(self): return _cmio.Polyline_JointChange_get_control_point_count(self)
    def set_control_point(self, *args): return _cmio.Polyline_JointChange_set_control_point(self, *args)
    def get_control_point_iterator(self): return _cmio.Polyline_JointChange_get_control_point_iterator(self)
    def get_control_points(self):
    	return self.get_control_point_iterator()

Polyline_JointChange_swigregister = _cmio.Polyline_JointChange_swigregister
Polyline_JointChange_swigregister(Polyline_JointChange)

class PolylineControlPoint_JointChange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolylineControlPoint_JointChange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolylineControlPoint_JointChange, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _cmio.PolylineControlPoint_JointChange_time_set
    __swig_getmethods__["time"] = _cmio.PolylineControlPoint_JointChange_time_get
    if _newclass:time = _swig_property(_cmio.PolylineControlPoint_JointChange_time_get, _cmio.PolylineControlPoint_JointChange_time_set)
    __swig_setmethods__["value"] = _cmio.PolylineControlPoint_JointChange_value_set
    __swig_getmethods__["value"] = _cmio.PolylineControlPoint_JointChange_value_get
    if _newclass:value = _swig_property(_cmio.PolylineControlPoint_JointChange_value_get, _cmio.PolylineControlPoint_JointChange_value_set)
    def __init__(self, *args): 
        this = _cmio.new_PolylineControlPoint_JointChange(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPoint_JointChange
    __del__ = lambda self : None;
PolylineControlPoint_JointChange_swigregister = _cmio.PolylineControlPoint_JointChange_swigregister
PolylineControlPoint_JointChange_swigregister(PolylineControlPoint_JointChange)

class PolylineControlPointIterator_JointChange(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PolylineControlPointIterator_JointChange, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PolylineControlPointIterator_JointChange, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_PolylineControlPointIterator_JointChange(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_PolylineControlPointIterator_JointChange
    __del__ = lambda self : None;
    def has_next(self): return _cmio.PolylineControlPointIterator_JointChange_has_next(self)
    def get_next(self): return _cmio.PolylineControlPointIterator_JointChange_get_next(self)
    def peek(self): return _cmio.PolylineControlPointIterator_JointChange_peek(self)
    def __iter__(self):
    	return self
    	
    def next(self):
    	if not self.has_next():
    		raise StopIteration
    	else:
    		return self.get_next()

PolylineControlPointIterator_JointChange_swigregister = _cmio.PolylineControlPointIterator_JointChange_swigregister
PolylineControlPointIterator_JointChange_swigregister(PolylineControlPointIterator_JointChange)

class PoseAnimation(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PoseAnimation, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PoseAnimation, name)
    __repr__ = _swig_repr
    def __init__(self, uid = ""): 
        this = _cmio.new_PoseAnimation(uid)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_PoseAnimation
    __del__ = lambda self : None;
    def get_joint_curve(self, *args): return _cmio.PoseAnimation_get_joint_curve(self, *args)
    def set_joint_curve(self, *args): return _cmio.PoseAnimation_set_joint_curve(self, *args)
    def get_pose(self, *args): return _cmio.PoseAnimation_get_pose(self, *args)
    def update_range(self): return _cmio.PoseAnimation_update_range(self)
    def get_range_lower_bound(self): return _cmio.PoseAnimation_get_range_lower_bound(self)
    def get_range_upper_bound(self): return _cmio.PoseAnimation_get_range_upper_bound(self)
PoseAnimation_swigregister = _cmio.PoseAnimation_swigregister
PoseAnimation_swigregister(PoseAnimation)

class Node(MioObject):
    __swig_setmethods__ = {}
    for _s in [MioObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Node, name, value)
    __swig_getmethods__ = {}
    for _s in [MioObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Node, name)
    __repr__ = _swig_repr
    def __init__(self, name = ""): 
        this = _cmio.new_Node(name)
        try: self.this.append(this)
        except: self.this = this
    def accept(self, *args): return _cmio.Node_accept(self, *args)
    __swig_destroy__ = _cmio.delete_Node
    __del__ = lambda self : None;
Node_swigregister = _cmio.Node_swigregister
Node_swigregister(Node)

class TransformNode(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformNode, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransformNode, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_TransformNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_TransformNode
    __del__ = lambda self : None;
    def get_child(self): return _cmio.TransformNode_get_child(self)
    def set_child(self, *args): return _cmio.TransformNode_set_child(self, *args)
    def get_transform(self): return _cmio.TransformNode_get_transform(self)
    def set_transform(self, *args): return _cmio.TransformNode_set_transform(self, *args)
    def accept(self, *args): return _cmio.TransformNode_accept(self, *args)
TransformNode_swigregister = _cmio.TransformNode_swigregister
TransformNode_swigregister(TransformNode)

class Group(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, Group, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, Group, name)
    __repr__ = _swig_repr
    def __init__(self, name = ""): 
        this = _cmio.new_Group(name)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_Group
    __del__ = lambda self : None;
    def append_child(self, *args): return _cmio.Group_append_child(self, *args)
    def _get_child(self, *args): return _cmio.Group__get_child(self, *args)
    def get_child(self, *args): return _cmio.Group_get_child(self, *args)
    def get_children_count(self): return _cmio.Group_get_children_count(self)
    def accept(self, *args): return _cmio.Group_accept(self, *args)
    def children(self):
    	for i in xrange(self.get_children_count()):
    		yield self.get_child(i)

Group_swigregister = _cmio.Group_swigregister
Group_swigregister(Group)

class SimplePrimitive(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimplePrimitive, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SimplePrimitive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_SimplePrimitive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_SimplePrimitive
    __del__ = lambda self : None;
    def get_mesh(self): return _cmio.SimplePrimitive_get_mesh(self)
    def set_mesh(self, *args): return _cmio.SimplePrimitive_set_mesh(self, *args)
    def get_material_mapping(self): return _cmio.SimplePrimitive_get_material_mapping(self)
    def set_material_mapping(self, *args): return _cmio.SimplePrimitive_set_material_mapping(self, *args)
    def get_texture_mapping(self): return _cmio.SimplePrimitive_get_texture_mapping(self)
    def set_texture_mapping(self, *args): return _cmio.SimplePrimitive_set_texture_mapping(self, *args)
    def get_material_list(self): return _cmio.SimplePrimitive_get_material_list(self)
    def set_material_list(self, *args): return _cmio.SimplePrimitive_set_material_list(self, *args)
    def accept(self, *args): return _cmio.SimplePrimitive_accept(self, *args)
SimplePrimitive_swigregister = _cmio.SimplePrimitive_swigregister
SimplePrimitive_swigregister(SimplePrimitive)

class RiggedPrimitive(Node):
    __swig_setmethods__ = {}
    for _s in [Node]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RiggedPrimitive, name, value)
    __swig_getmethods__ = {}
    for _s in [Node]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RiggedPrimitive, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _cmio.new_RiggedPrimitive(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_RiggedPrimitive
    __del__ = lambda self : None;
    def get_morphed_primitive(self): return _cmio.RiggedPrimitive_get_morphed_primitive(self)
    def get_rest_mesh(self): return _cmio.RiggedPrimitive_get_rest_mesh(self)
    def get_moprhed_mesh(self): return _cmio.RiggedPrimitive_get_moprhed_mesh(self)
    def get_texture_mapping(self): return _cmio.RiggedPrimitive_get_texture_mapping(self)
    def get_material_mapping(self): return _cmio.RiggedPrimitive_get_material_mapping(self)
    def get_material_list(self): return _cmio.RiggedPrimitive_get_material_list(self)
    def get_rest_armature(self): return _cmio.RiggedPrimitive_get_rest_armature(self)
    def get_morphed_armature(self): return _cmio.RiggedPrimitive_get_morphed_armature(self)
    def get_joint_weight_mapping(self): return _cmio.RiggedPrimitive_get_joint_weight_mapping(self)
    def update_rest_joint_transforms(self): return _cmio.RiggedPrimitive_update_rest_joint_transforms(self)
    def update_morphed_joint_transforms(self): return _cmio.RiggedPrimitive_update_morphed_joint_transforms(self)
    def morph(self, *args): return _cmio.RiggedPrimitive_morph(self, *args)
    def accept(self, *args): return _cmio.RiggedPrimitive_accept(self, *args)
RiggedPrimitive_swigregister = _cmio.RiggedPrimitive_swigregister
RiggedPrimitive_swigregister(RiggedPrimitive)

class MeshVisitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MeshVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == MeshVisitor:
            _self = None
        else:
            _self = self
        this = _cmio.new_MeshVisitor(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_MeshVisitor
    __del__ = lambda self : None;
    def visit_IndexedMesh(self, *args): return _cmio.MeshVisitor_visit_IndexedMesh(self, *args)
    def __disown__(self):
        self.this.disown()
        _cmio.disown_MeshVisitor(self)
        return weakref_proxy(self)
MeshVisitor_swigregister = _cmio.MeshVisitor_swigregister
MeshVisitor_swigregister(MeshVisitor)

class MaterialVisitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialVisitor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_MaterialVisitor
    __del__ = lambda self : None;
    def visit_PhongMaterial(self, *args): return _cmio.MaterialVisitor_visit_PhongMaterial(self, *args)
    def visit_TexturedPhongMaterial(self, *args): return _cmio.MaterialVisitor_visit_TexturedPhongMaterial(self, *args)
    def visit_MqoMaterial(self, *args): return _cmio.MaterialVisitor_visit_MqoMaterial(self, *args)
    def visit_TexturedMqoMaterial(self, *args): return _cmio.MaterialVisitor_visit_TexturedMqoMaterial(self, *args)
    def __init__(self): 
        if self.__class__ == MaterialVisitor:
            _self = None
        else:
            _self = self
        this = _cmio.new_MaterialVisitor(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _cmio.disown_MaterialVisitor(self)
        return weakref_proxy(self)
MaterialVisitor_swigregister = _cmio.MaterialVisitor_swigregister
MaterialVisitor_swigregister(MaterialVisitor)

class MaterialMappingVisitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaterialMappingVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaterialMappingVisitor, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _cmio.delete_MaterialMappingVisitor
    __del__ = lambda self : None;
    def visit_ByPolygonMaterialMapping(self, *args): return _cmio.MaterialMappingVisitor_visit_ByPolygonMaterialMapping(self, *args)
    def __init__(self): 
        if self.__class__ == MaterialMappingVisitor:
            _self = None
        else:
            _self = self
        this = _cmio.new_MaterialMappingVisitor(_self, )
        try: self.this.append(this)
        except: self.this = this
    def __disown__(self):
        self.this.disown()
        _cmio.disown_MaterialMappingVisitor(self)
        return weakref_proxy(self)
MaterialMappingVisitor_swigregister = _cmio.MaterialMappingVisitor_swigregister
MaterialMappingVisitor_swigregister(MaterialMappingVisitor)

class TextureVisitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextureVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextureVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == TextureVisitor:
            _self = None
        else:
            _self = self
        this = _cmio.new_TextureVisitor(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_TextureVisitor
    __del__ = lambda self : None;
    def visit_ILTexture(self, *args): return _cmio.TextureVisitor_visit_ILTexture(self, *args)
    def visit_LazyILTexture(self, *args): return _cmio.TextureVisitor_visit_LazyILTexture(self, *args)
    def __disown__(self):
        self.this.disown()
        _cmio.disown_TextureVisitor(self)
        return weakref_proxy(self)
TextureVisitor_swigregister = _cmio.TextureVisitor_swigregister
TextureVisitor_swigregister(TextureVisitor)

class TextureMappingVisitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, TextureMappingVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, TextureMappingVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == TextureMappingVisitor:
            _self = None
        else:
            _self = self
        this = _cmio.new_TextureMappingVisitor(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_TextureMappingVisitor
    __del__ = lambda self : None;
    def visit_IndexedTextureMapping(self, *args): return _cmio.TextureMappingVisitor_visit_IndexedTextureMapping(self, *args)
    def __disown__(self):
        self.this.disown()
        _cmio.disown_TextureMappingVisitor(self)
        return weakref_proxy(self)
TextureMappingVisitor_swigregister = _cmio.TextureMappingVisitor_swigregister
TextureMappingVisitor_swigregister(TextureMappingVisitor)

class NodeVisitor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, NodeVisitor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, NodeVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cmio.new_NodeVisitor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_NodeVisitor
    __del__ = lambda self : None;
    def visit_SimplePrimitive(self, *args): return _cmio.NodeVisitor_visit_SimplePrimitive(self, *args)
    def visit_Group(self, *args): return _cmio.NodeVisitor_visit_Group(self, *args)
    def visit_TransformNode(self, *args): return _cmio.NodeVisitor_visit_TransformNode(self, *args)
    def visit_RiggedPrimitive(self, *args): return _cmio.NodeVisitor_visit_RiggedPrimitive(self, *args)
NodeVisitor_swigregister = _cmio.NodeVisitor_swigregister
NodeVisitor_swigregister(NodeVisitor)

class OmniVisitor(NodeVisitor,MaterialVisitor,MaterialMappingVisitor,TextureVisitor,TextureMappingVisitor,MeshVisitor):
    __swig_setmethods__ = {}
    for _s in [NodeVisitor,MaterialVisitor,MaterialMappingVisitor,TextureVisitor,TextureMappingVisitor,MeshVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OmniVisitor, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeVisitor,MaterialVisitor,MaterialMappingVisitor,TextureVisitor,TextureMappingVisitor,MeshVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OmniVisitor, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == OmniVisitor:
            _self = None
        else:
            _self = self
        this = _cmio.new_OmniVisitor(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_OmniVisitor
    __del__ = lambda self : None;
    def __disown__(self):
        self.this.disown()
        _cmio.disown_OmniVisitor(self)
        return weakref_proxy(self)
OmniVisitor_swigregister = _cmio.OmniVisitor_swigregister
OmniVisitor_swigregister(OmniVisitor)

class GLRenderer(NodeVisitor,MaterialVisitor,TextureVisitor):
    __swig_setmethods__ = {}
    for _s in [NodeVisitor,MaterialVisitor,TextureVisitor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GLRenderer, name, value)
    __swig_getmethods__ = {}
    for _s in [NodeVisitor,MaterialVisitor,TextureVisitor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GLRenderer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _cmio.new_GLRenderer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _cmio.delete_GLRenderer
    __del__ = lambda self : None;
    def visit_SimplePrimitive(self, *args): return _cmio.GLRenderer_visit_SimplePrimitive(self, *args)
    def visit_Group(self, *args): return _cmio.GLRenderer_visit_Group(self, *args)
    def visit_TransformNode(self, *args): return _cmio.GLRenderer_visit_TransformNode(self, *args)
    def visit_RiggedPrimitive(self, *args): return _cmio.GLRenderer_visit_RiggedPrimitive(self, *args)
    def visit_PhongMaterial(self, *args): return _cmio.GLRenderer_visit_PhongMaterial(self, *args)
    def visit_TexturedPhongMaterial(self, *args): return _cmio.GLRenderer_visit_TexturedPhongMaterial(self, *args)
    def visit_MqoMaterial(self, *args): return _cmio.GLRenderer_visit_MqoMaterial(self, *args)
    def visit_TexturedMqoMaterial(self, *args): return _cmio.GLRenderer_visit_TexturedMqoMaterial(self, *args)
    def visit_ILTexture(self, *args): return _cmio.GLRenderer_visit_ILTexture(self, *args)
    def visit_LazyILTexture(self, *args): return _cmio.GLRenderer_visit_LazyILTexture(self, *args)
    def reset_state(self): return _cmio.GLRenderer_reset_state(self)
    def set_draw_normals(self, *args): return _cmio.GLRenderer_set_draw_normals(self, *args)
    def set_draw_wireframes(self, *args): return _cmio.GLRenderer_set_draw_wireframes(self, *args)
    def set_draw_surface(self, *args): return _cmio.GLRenderer_set_draw_surface(self, *args)
GLRenderer_swigregister = _cmio.GLRenderer_swigregister
GLRenderer_swigregister(GLRenderer)



